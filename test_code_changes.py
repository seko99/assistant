#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –∫–æ–¥–µ orchestrator.py
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —É—Ä–æ–≤–Ω–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ –±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞
"""

import os
import sys


def test_file_changes():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ orchestrator.py"""

    orchestrator_file = "/home/seko/Projects/ai/assistant/podcast/orchestrator.py"

    if not os.path.exists(orchestrator_file):
        print("‚ùå –§–∞–π–ª orchestrator.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False

    with open(orchestrator_file, 'r', encoding='utf-8') as f:
        content = f.read()

    print("üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤...")

    # –ú–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã
    removed_methods = [
        'def _moderator_question_for_speaker',
        'def _moderator_transition'
    ]

    for method in removed_methods:
        if method in content:
            print(f"‚ùå –ú–µ—Ç–æ–¥ {method} –ù–ï —É–¥–∞–ª–µ–Ω!")
            return False
        else:
            print(f"‚úÖ –ú–µ—Ç–æ–¥ {method} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")

    print("\nüß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ _run_discussion_round...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–¥–∞–ª–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –≤—ã–∑–æ–≤—ã
    forbidden_calls = [
        '_moderator_question_for_speaker(',
        '_moderator_transition('
    ]

    for call in forbidden_calls:
        if call in content:
            print(f"‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤—ã–∑–æ–≤ {call}!")
            return False
        else:
            print(f"‚úÖ –í—ã–∑–æ–≤ {call} —É–¥–∞–ª–µ–Ω")

    print("\nüß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ª—É—á—à–µ–Ω–∏–π –≤ _moderator_round_intro...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –ø—Ä–æ–º–ø—Ç–µ
    improvements = [
        '–Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã',
        '–£—á–∞—Å—Ç–Ω–∏–∫–∏:',
        '–µ–¥–∏–Ω–æ–µ —Å–≤—è–∑–Ω–æ–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ'
    ]

    for improvement in improvements:
        if improvement in content:
            print(f"‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ '{improvement}' –Ω–∞–π–¥–µ–Ω–æ")
        else:
            print(f"‚ö†Ô∏è –£–ª—É—á—à–µ–Ω–∏–µ '{improvement}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    print("\nüß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è _speaker_response...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –æ—Ç–≤–µ—Ç–∞—Ö —Å–ø–∏–∫–µ—Ä–æ–≤
    speaker_improvements = [
        '–≤–≤–µ–¥–µ–Ω–∏–µ –≤ —Ä–∞—É–Ω–¥',
        '–∑–∞—Ç—Ä–æ–Ω—É—Ç—ã–º –≤–æ–ø—Ä–æ—Å–∞–º'
    ]

    for improvement in speaker_improvements:
        if improvement in content:
            print(f"‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ '{improvement}' –Ω–∞–π–¥–µ–Ω–æ –≤ _speaker_response")
        else:
            print(f"‚ö†Ô∏è –£–ª—É—á—à–µ–Ω–∏–µ '{improvement}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ _speaker_response")

    return True


def test_line_count_changes():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫"""

    orchestrator_file = "/home/seko/Projects/ai/assistant/podcast/orchestrator.py"

    with open(orchestrator_file, 'r', encoding='utf-8') as f:
        lines = f.readlines()

    line_count = len(lines)
    print(f"\nüìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ orchestrator.py: {line_count}")

    # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ, —á–µ–º –±—ã–ª–æ (–ø—Ä–∏–º–µ—Ä–Ω–æ –Ω–∞ 50+ —Å—Ç—Ä–æ–∫)
    if line_count < 500:  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        print("‚úÖ –§–∞–π–ª —Å—Ç–∞–ª –∫–æ–º–ø–∞–∫—Ç–Ω–µ–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤")
    else:
        print("‚ö†Ô∏è –§–∞–π–ª –≤—Å–µ –µ—â–µ –¥–æ–≤–æ–ª—å–Ω–æ –±–æ–ª—å—à–æ–π")

    return True


def analyze_new_flow():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—É–Ω–¥–æ–≤"""

    print("\nüìã –ê–ù–ê–õ–ò–ó –ù–û–í–û–ì–û –ü–û–¢–û–ö–ê –í–´–ü–û–õ–ù–ï–ù–ò–Ø:")
    print("=" * 50)

    expected_flow = [
        "1. –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –¥–µ–ª–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–∏–µ —Å –Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ (_moderator_round_intro)",
        "2. –ö–∞–∂–¥—ã–π —Å–ø–∏–∫–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã (_speaker_response)",
        "3. –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É (–±–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å–≤—è–∑–æ–∫)"
    ]

    for step in expected_flow:
        print(f"‚úÖ {step}")

    print("\nüö´ –£–î–ê–õ–ï–ù–ù–´–ï –≠–õ–ï–ú–ï–ù–¢–´:")
    removed_elements = [
        "‚ùå –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∫–∞–∂–¥–æ–º—É —Å–ø–∏–∫–µ—Ä—É",
        "‚ùå –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–≤—è–∑–∫–∏ –º–µ–∂–¥—É —Å–ø–∏–∫–µ—Ä–∞–º–∏",
        "‚ùå –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"
    ]

    for element in removed_elements:
        print(f"   {element}")

    return True


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üéôÔ∏è –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –†–ï–ü–õ–ò–ö –ú–û–î–ï–†–ê–¢–û–†–ê")
    print("=" * 65)

    tests = [
        ("–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–¥–µ", test_file_changes),
        ("–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Ñ–∞–π–ª–∞", test_line_count_changes),
        ("–ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞", analyze_new_flow)
    ]

    passed = 0
    total = len(tests)

    for test_name, test_func in tests:
        print(f"\nüìã {test_name}:")
        try:
            if test_func():
                passed += 1
                print(f"‚úÖ {test_name}: –£–°–ü–ï–®–ù–û")
            else:
                print(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e}")

    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´: {passed}/{total} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ")

    if passed == total:
        print("\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´!")
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–ø–ª–∏–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        print("\nüí° –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print("   ‚Ä¢ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –≥–æ–≤–æ—Ä–∏—Ç 1 —Ä–∞–∑ –≤ –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ä–∞—É–Ω–¥–∞")
        print("   ‚Ä¢ –°–ø–∏–∫–µ—Ä—ã –æ—Ç–≤–µ—á–∞—é—Ç –Ω–∞ –æ–±—â–∏–µ –Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã")
        print("   ‚Ä¢ –£—Å—Ç—Ä–∞–Ω–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
        print("   ‚Ä¢ –ë–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ –±–µ—Å–µ–¥—ã")
        return 0
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω—ã.")
        return 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)