#!/usr/bin/env python3
"""
Speech Parrot API

–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:
1. Vosk - –¥–µ—Ç–µ–∫—Ü–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (wake word detection)  
2. FasterWhisper - —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –±–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–∞—É–∑
3. Silero TTS - —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏

–ü—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç—ã:
1. –û–∂–∏–¥–∞–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–π —Ñ—Ä–∞–∑—ã (vosk)
2. –ó–∞–ø–∏—Å—å —Ä–µ—á–∏ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è (faster-whisper)
3. –°–∏–Ω—Ç–µ–∑ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (silero)
4. –í–æ–∑–≤—Ä–∞—Ç –∫ –æ–∂–∏–¥–∞–Ω–∏—é –∫–ª—é—á–µ–≤–æ–π —Ñ—Ä–∞–∑—ã

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python parrot.py
"""

import json
import os
import threading
import time
from collections import deque
from enum import Enum

import numpy as np
import sounddevice as sd
import soundfile as sf
import vosk
import torch
from faster_whisper import WhisperModel


class ParrotState(Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ø—É–≥–∞—è"""
    LISTENING = "listening"      # –û–∂–∏–¥–∞–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–π —Ñ—Ä–∞–∑—ã
    RECORDING = "recording"      # –ó–∞–ø–∏—Å—å –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è  
    TRANSCRIBING = "transcribing" # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
    SYNTHESIZING = "synthesizing" # –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏
    PLAYING = "playing"          # –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ


def load_config(config_file='config.json'):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open(config_file, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return None


class WakeWordDetector:
    """–î–µ—Ç–µ–∫—Ç–æ—Ä –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ Vosk"""
    
    def __init__(self, config, debug=False):
        self.config = config
        self.wake_config = config['wake_word']
        self.model = None
        self.recognizer = None
        self.keywords = self.wake_config['keywords']
        self.debug = debug  # –î–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
        
        # –ö–æ–ª—å—Ü–µ–≤–æ–π –±—É—Ñ–µ—Ä –¥–ª—è pre-trigger –∞—É–¥–∏–æ
        self.pre_trigger_duration = self.wake_config.get('pre_trigger_duration', 3.0)
        self.sample_rate = self.wake_config['sample_rate']
        self.chunk_size = self.wake_config['chunk_size']
        buffer_size = int(self.sample_rate * self.pre_trigger_duration)
        self.audio_buffer = deque(maxlen=buffer_size)
        
    def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ Vosk"""
        model_path = self.wake_config['model_path']
        
        if not os.path.exists(model_path):
            print(f"‚ùå –ú–æ–¥–µ–ª—å Vosk –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
            print("   –°–∫–∞—á–∞–π—Ç–µ –º–æ–¥–µ–ª—å —Å https://alphacephei.com/vosk/models")
            return False
            
        try:
            print(f"üîç –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Vosk: {model_path}")
            self.model = vosk.Model(model_path)
            
            # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
            keywords_json = json.dumps(self.keywords)
            sample_rate = self.wake_config['sample_rate']
            self.recognizer = vosk.KaldiRecognizer(self.model, sample_rate, '["–∏–Ω–Ω–æ–∫–µ–Ω—Ç–∏–π"]')
            
            print(f"‚úÖ Vosk –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏: {self.keywords}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Vosk: {e}")
            return False
    
    def add_audio_to_buffer(self, audio_data):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–ª—å—Ü–µ–≤–æ–π –±—É—Ñ–µ—Ä"""
        self.audio_buffer.extend(audio_data)
    
    def get_pre_trigger_audio(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–µ pre-trigger –∞—É–¥–∏–æ"""
        return np.array(list(self.audio_buffer), dtype=np.float32)
    
    def detect_wake_word(self, audio_data):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –≤ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö"""
        if not self.recognizer:
            if self.debug:
                print("üîç DEBUG: recognizer –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            return False, ""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –≤ –±—É—Ñ–µ—Ä
        self.add_audio_to_buffer(audio_data)
        
        # DEBUG —Å—á–µ—Ç—á–∏–∫ –≤—ã–∑–æ–≤–æ–≤
        if self.debug:
            if not hasattr(self, '_detect_count'):
                self._detect_count = 0
                print("üîç DEBUG: detect_wake_word –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É")
            self._detect_count += 1
            if self._detect_count % 50 == 0:  # –∫–∞–∂–¥—ã–µ 50 –≤—ã–∑–æ–≤–æ–≤
                print(f"üîç DEBUG: detect_wake_word –≤—ã–∑–≤–∞–Ω {self._detect_count} —Ä–∞–∑")
        
        start_time = time.time()
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º float32 –≤ int16 –¥–ª—è Vosk
            audio_int16 = (audio_data * 32767).astype(np.int16).tobytes()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if self.recognizer.AcceptWaveform(audio_int16):
                result = json.loads(self.recognizer.Result())
                if 'text' in result and result['text']:
                    text = result['text'].lower()
                    if self.debug:
                        print(f"üîç Vosk —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: '{text}'")
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª—é–±–æ–≥–æ –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                    if '–∏–Ω–Ω–æ–∫–µ–Ω—Ç–∏–π' in text:
                        detection_time = time.time() - start_time
                        # –ü–æ–ª—É—á–∞–µ–º pre-trigger –∞—É–¥–∏–æ
                        pre_trigger_audio = self.get_pre_trigger_audio()
                        return True, (text, detection_time, pre_trigger_audio)
            return False, ""
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞: {e}")
            return False, ""


class SpeechRecognizer:
    """–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å —Ä–µ—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ FasterWhisper (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è voice_recorder.py)"""
    
    def __init__(self, config):
        self.config = config
        self.transcription_config = config['transcription']
        self.whisper_model = None
        
    def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ FasterWhisper"""
        try:
            model_size = self.transcription_config.get('whisper_model', 'base')
            device = self.transcription_config.get('device', 'auto')
            compute_type = self.transcription_config.get('compute_type', 'auto')
            
            # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if device == 'auto' or compute_type == 'auto':
                device, compute_type = self._detect_optimal_settings()
                
            print(f"üîç –ó–∞–≥—Ä—É–∑–∫–∞ FasterWhisper: {model_size}/{device}/{compute_type}")
            
            self.whisper_model = WhisperModel(
                model_size,
                device=device,
                compute_type=compute_type
            )
            
            print(f"‚úÖ FasterWhisper –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ FasterWhisper: {e}")
            return False
    
    def _detect_optimal_settings(self):
        """–ü—Ä–æ—Å—Ç–æ–µ –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å CUDA
            import torch
            if torch.cuda.is_available():
                return "cuda", "float16"
        except:
            pass
        return "cpu", "int8"
    
    def transcribe_audio(self, audio_data, sample_rate):
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç"""
        if not self.whisper_model:
            return ""
        
        start_time = time.time()
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è FasterWhisper
            temp_filename = f"temp_recording_{int(time.time())}.wav"
            sf.write(temp_filename, audio_data, sample_rate)
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º
            language = self.transcription_config.get('language', 'ru')
            beam_size = self.transcription_config.get('beam_size', 5)
            
            segments, info = self.whisper_model.transcribe(
                temp_filename,
                language=language,
                beam_size=beam_size,
                word_timestamps=False
            )
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç
            text_segments = []
            for segment in segments:
                text_segments.append(segment.text)
            
            text = " ".join(text_segments).strip()
            transcription_time = time.time() - start_time
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.remove(temp_filename)
            except:
                pass
            
            if text.strip():
                print(f"üìÑ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text} (–≤—Ä–µ–º—è: {transcription_time:.3f}s)")
            
            return text
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
            return ""


class TextToSpeech:
    """–°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ Silero TTS"""
    
    def __init__(self, config):
        self.config = config
        self.parrot_config = config['parrot']
        self.model = None
        self.sample_rate = self.parrot_config['tts_sample_rate']
        self.speaker = self.parrot_config['tts_speaker']
        self.use_accentizer = self.parrot_config.get('use_accentizer', False)
        self.accentizer = None
        
    def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ Silero TTS"""
        try:
            print("üîç –ó–∞–≥—Ä—É–∑–∫–∞ Silero TTS...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å Silero
            device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
            self.model, example_text = torch.hub.load(
                repo_or_dir='snakers4/silero-models',
                model='silero_tts',
                language='ru',
                speaker='ru_v3'
            )
            self.model.to(device)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ü–µ–Ω—Ç–∏–∑–∞—Ç–æ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if self.use_accentizer:
                try:
                    from ruaccent import RUAccent
                    self.accentizer = RUAccent()
                    self.accentizer.load(omograph_model_size='turbo', use_dictionary=True)
                    print("‚úÖ RUAccent –∑–∞–≥—Ä—É–∂–µ–Ω")
                except ImportError:
                    print("‚ö†Ô∏è RUAccent –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Å–∏–Ω—Ç–µ–∑ –±–µ–∑ —É–¥–∞—Ä–µ–Ω–∏–π")
                    self.use_accentizer = False
            
            print(f"‚úÖ Silero TTS –≥–æ—Ç–æ–≤ (–¥–∏–Ω–∞–º–∏–∫: {self.speaker})")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Silero TTS: {e}")
            return False
    
    def synthesize_and_play(self, text):
        """–°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ—Ç –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Ä–µ—á—å"""
        if not self.model or not text.strip():
            return False
        
        start_time = time.time()
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∞–∫—Ü–µ–Ω—Ç–∏–∑–∞—Ç–æ—Ä–æ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            processed_text = text
            if self.use_accentizer and self.accentizer:
                processed_text = self.accentizer.process_all(text)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ
            audio = self.model.apply_tts(
                text=processed_text,
                speaker=self.speaker,
                sample_rate=self.sample_rate
            )
            
            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º
            audio_np = audio.detach().cpu().numpy()
            synthesis_time = time.time() - start_time
            print(f"üó£Ô∏è –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º: {text} (–≤—Ä–µ–º—è: {synthesis_time:.3f}s)")
            
            sd.play(audio_np, self.sample_rate)
            sd.wait()  # –ñ–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏: {e}")
            return False


class PauseDetector:
    """–î–µ—Ç–µ–∫—Ç–æ—Ä –ø–∞—É–∑ –≤ —Ä–µ—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —ç–Ω–µ—Ä–≥–∏–∏ —Å–∏–≥–Ω–∞–ª–∞"""
    
    def __init__(self, config, debug=False):
        self.config = config
        self.voice_config = config['voice_detection']
        self.debug = debug
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ—Ç–µ–∫—Ü–∏–∏
        self.pause_threshold = self.voice_config.get('pause_threshold', 3.0)  # —Å–µ–∫—É–Ω–¥—ã
        self.voice_energy_threshold = self.voice_config.get('voice_energy_threshold', 0.01)
        self.min_recording_duration = self.voice_config.get('min_recording_duration', 0.5)  # —Å–µ–∫—É–Ω–¥—ã
        self.pause_detection_enabled = self.voice_config.get('pause_detection_enabled', True)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.sample_rate = config['wake_word']['sample_rate']  # –∏—Å–ø–æ–ª—å–∑—É–µ–º sample_rate –æ—Ç wake_word
        self.chunk_size = config['wake_word']['chunk_size']
        self.samples_per_second = self.sample_rate / self.chunk_size
        
        # –°—á–µ—Ç—á–∏–∫–∏
        self.reset()
        
    def reset(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""
        self.silence_chunks = 0
        self.total_chunks = 0
        self.noise_level = None
        self.calibration_samples = []
        
    def calibrate_noise_level(self, audio_chunk):
        """–ö–∞–ª–∏–±—Ä—É–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Ñ–æ–Ω–æ–≤–æ–≥–æ —à—É–º–∞"""
        if len(self.calibration_samples) < 10:  # —Å–æ–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —á–∞–Ω–∫–æ–≤ –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
            energy = self._calculate_energy(audio_chunk)
            self.calibration_samples.append(energy)
            
            if len(self.calibration_samples) == 10:
                self.noise_level = np.mean(self.calibration_samples) * 2.0  # –Ω–µ–º–Ω–æ–≥–æ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ñ–æ–Ω–∞
                if self.debug:
                    print(f"üîä –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ —à—É–º–∞: {self.noise_level:.6f}")
    
    def _calculate_energy(self, audio_chunk):
        """–í—ã—á–∏—Å–ª—è–µ—Ç RMS —ç–Ω–µ—Ä–≥–∏—é –∞—É–¥–∏–æ —á–∞–Ω–∫–∞"""
        return np.sqrt(np.mean(audio_chunk**2))
    
    def is_voice_detected(self, audio_chunk):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –≥–æ–ª–æ—Å –≤ –∞—É–¥–∏–æ —á–∞–Ω–∫–µ"""
        if not self.pause_detection_enabled:
            return True  # –≤—Å–µ–≥–¥–∞ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –≥–æ–ª–æ—Å –µ—Å—Ç—å
            
        energy = self._calculate_energy(audio_chunk)
        
        # –ö–∞–ª–∏–±—Ä—É–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if self.noise_level is None:
            self.calibrate_noise_level(audio_chunk)
            return True  # –≤–æ –≤—Ä–µ–º—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –≥–æ–ª–æ—Å –µ—Å—Ç—å
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ—Ä–æ–≥: –º–∞–∫—Å–∏–º—É–º –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞ –∏ –∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —à—É–º–∞
        threshold = max(self.voice_energy_threshold, self.noise_level)
        is_voice = energy > threshold
        
        if self.debug and self.total_chunks % 10 == 0:  # –∫–∞–∂–¥—ã–µ 10 —á–∞–Ω–∫–æ–≤
            print(f"üîä –≠–Ω–µ—Ä–≥–∏—è: {energy:.6f}, –ø–æ—Ä–æ–≥: {threshold:.6f}, –≥–æ–ª–æ—Å: {is_voice}")
        
        return is_voice
    
    def should_stop_recording(self, audio_chunk, recording_duration):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å"""
        if not self.pause_detection_enabled:
            return False
            
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–±–ª—é–¥–µ–Ω–∞
        if recording_duration < self.min_recording_duration:
            return False
        
        self.total_chunks += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥–æ–ª–æ—Å–∞
        if self.is_voice_detected(audio_chunk):
            self.silence_chunks = 0  # —Å–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ —Ç–∏—à–∏–Ω—ã
        else:
            self.silence_chunks += 1
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Ç–∏—à–∏–Ω—ã
        silence_duration = self.silence_chunks / self.samples_per_second
        
        if self.debug and self.silence_chunks > 0 and self.silence_chunks % 5 == 0:
            print(f"ü§´ –¢–∏—à–∏–Ω–∞: {silence_duration:.1f}s –∏–∑ {self.pause_threshold}s")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞ —Ç–∏—à–∏–Ω—ã
        return silence_duration >= self.pause_threshold


class SpeechParrot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø–æ–ø—É–≥–∞—è, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∏–π –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"""
    
    def __init__(self, config_file='config.json', debug=False):
        self.config = load_config(config_file)
        if not self.config:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        
        self.debug = debug
            
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.wake_detector = WakeWordDetector(self.config, debug=debug)
        self.speech_recognizer = SpeechRecognizer(self.config)  
        self.tts = TextToSpeech(self.config)
        self.pause_detector = PauseDetector(self.config, debug=debug)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.state = ParrotState.LISTENING
        self.should_stop = threading.Event()
        
        # –ê—É–¥–∏–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.sample_rate = self.config['wake_word']['sample_rate']
        self.chunk_size = self.config['wake_word']['chunk_size']
        
        # –ë—É—Ñ–µ—Ä—ã –¥–ª—è –∑–∞–ø–∏—Å–∏
        self.recording_buffer = []
        self.recording_lock = threading.Lock()
        self.max_recording_duration = self.config['parrot']['max_recording_duration']
        self.recording_start_time = None
        self.recording_timer = None
        self.stop_reason = None  # –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏
        
    def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–æ–ø—É–≥–∞—è...")
        
        if not self.wake_detector.initialize():
            return False
            
        if not self.speech_recognizer.initialize():
            return False
            
        if not self.tts.initialize():
            return False
            
        print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        return True
    
    def audio_callback(self, indata, frames, time_info, status):
        """–ö–æ–ª–±—ç–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞"""
        if status:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞: {status}")
            return
        
        # DEBUG: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–±—ç–∫ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è
        if self.debug and hasattr(self, '_callback_count'):
            self._callback_count += 1
            if self._callback_count % 100 == 0:  # –∫–∞–∂–¥—ã–µ 100 –≤—ã–∑–æ–≤–æ–≤
                print(f"üîç DEBUG: audio_callback –≤—ã–∑–≤–∞–Ω {self._callback_count} —Ä–∞–∑")
        elif self.debug:
            self._callback_count = 1
            print("üîç DEBUG: audio_callback –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É")
            
        audio_chunk = indata[:, 0]  # –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª
        
        with self.recording_lock:
            if self.state == ParrotState.LISTENING:
                # –ò—â–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
                wake_detected, result = self.wake_detector.detect_wake_word(audio_chunk)
                
                if wake_detected:
                    text, detection_time, pre_trigger_audio = result
                    print(f"üéâ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {text} (–≤—Ä–µ–º—è: {detection_time:.3f}s)")
                    self._start_recording(pre_trigger_audio)
                elif self.debug and result:  # –µ—Å–ª–∏ –µ—Å—Ç—å –ª—é–±–æ–π —Ç–µ–∫—Å—Ç
                    print(f"üîç DEBUG: Vosk –≤–µ—Ä–Ω—É–ª —Ç–µ–∫—Å—Ç: '{result}', wake_detected={wake_detected}")
                    
            elif self.state == ParrotState.RECORDING:
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞—É–¥–∏–æ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
                self.recording_buffer.extend(audio_chunk)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏
                if self.recording_start_time:
                    duration = time.time() - self.recording_start_time
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é –ø–∞—É–∑
                    if self.pause_detector.should_stop_recording(audio_chunk, duration):
                        self.stop_reason = "pause"
                        if self.debug:
                            print(f"ü§´ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –ø–∞—É–∑–µ (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.1f}s)")
                        self._stop_recording_and_process()
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏
                    elif duration >= self.max_recording_duration:
                        self.stop_reason = "timeout"
                        print(f"‚è∞ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø–∏—Å–∏ ({self.max_recording_duration}—Å)")
                        self._stop_recording_and_process()
    
    def _start_recording(self, pre_trigger_audio=None):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"""
        self.state = ParrotState.RECORDING
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä –ø–∞—É–∑
        self.pause_detector.reset()
        self.stop_reason = None
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å pre-trigger –∞—É–¥–∏–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –Ω–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏
        if pre_trigger_audio is not None and len(pre_trigger_audio) > 0:
            self.recording_buffer = list(pre_trigger_audio)
            print(f"üî¥ –ù–∞—á–∏–Ω–∞—é –∑–∞–ø–∏—Å—å —Å pre-trigger ({len(pre_trigger_audio)} —Å—ç–º–ø–ª–æ–≤)...")
        else:
            self.recording_buffer = []
            print("üî¥ –ù–∞—á–∏–Ω–∞—é –∑–∞–ø–∏—Å—å...")
            
        self.recording_start_time = time.time()
        
        # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
        if self.recording_timer:
            self.recording_timer.cancel()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏ (–∫–∞–∫ fallback)
        self.recording_timer = threading.Timer(self.max_recording_duration, lambda: self._stop_recording_and_process("timeout"))
        self.recording_timer.start()
    
    def _stop_recording_and_process(self, reason=None):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–ø–∏—Å—å –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É"""
        if self.state != ParrotState.RECORDING:
            return
        
        # –ï—Å–ª–∏ –ø—Ä–∏—á–∏–Ω–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é
        if reason is None:
            reason = self.stop_reason or "unknown"
            
        self.state = ParrotState.TRANSCRIBING
        duration = time.time() - self.recording_start_time if self.recording_start_time else 0
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        if reason == "pause":
            print(f"‚èπÔ∏è –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ –ø–∞—É–∑–µ ({duration:.1f}—Å)")
        elif reason == "timeout":
            print(f"‚èπÔ∏è –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É ({duration:.1f}—Å)")
        else:
            print(f"‚èπÔ∏è –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ({duration:.1f}—Å)")
        
        # –ö–æ–ø–∏—Ä—É–µ–º –±—É—Ñ–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        audio_data = np.array(self.recording_buffer.copy(), dtype=np.float32)
        processing_thread = threading.Thread(
            target=self._process_recording,
            args=(audio_data,),
            daemon=True
        )
        processing_thread.start()
        
    def _process_recording(self, audio_data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ (—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ + —Å–∏–Ω—Ç–µ–∑)"""
        try:
            if len(audio_data) == 0:
                print("‚ö†Ô∏è –ü—É—Å—Ç–∞—è –∑–∞–ø–∏—Å—å")
                self._reset_to_listening()
                return
                
            # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
            print("üìù –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å...")
            text = self.speech_recognizer.transcribe_audio(audio_data, self.sample_rate)
            
            if not text.strip():
                print("‚ùå –¢–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω")
                self._reset_to_listening()
                return
            
            # –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º
            self.state = ParrotState.SYNTHESIZING
            success = self.tts.synthesize_and_play(text)
            
            if success:
                print("‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏: {e}")
        finally:
            self._reset_to_listening()
    
    def _reset_to_listening(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—é –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
        with self.recording_lock:
            # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω
            if self.recording_timer:
                self.recording_timer.cancel()
                self.recording_timer = None
                
            self.state = ParrotState.LISTENING
            self.recording_buffer = []
            self.recording_start_time = None
        print("üëÇ –ñ–¥—É –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ...")
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –ø–æ–ø—É–≥–∞—è"""
        print("ü¶ú –ó–∞–ø—É—Å–∫ —Ä–µ—á–µ–≤–æ–≥–æ –ø–æ–ø—É–≥–∞—è")
        print(f"   –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {self.wake_detector.keywords}")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å: {self.max_recording_duration}—Å")
        print("   –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        print()
        
        self._reset_to_listening()
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫
            with sd.InputStream(
                callback=self.audio_callback,
                channels=1,
                samplerate=self.sample_rate,
                blocksize=self.chunk_size,
                dtype='float32'
            ):
                while not self.should_stop.is_set():
                    time.sleep(0.1)
                    
        except KeyboardInterrupt:
            print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ø—É–≥–∞—è...")
            self.should_stop.set()
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            self.should_stop.set()
        
        print("‚úÖ –ü–æ–ø—É–≥–∞–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import sys
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    debug = "--debug" in sys.argv or "-d" in sys.argv
    
    if "--help" in sys.argv or "-h" in sys.argv:
        print("Speech Parrot - –†–µ—á–µ–≤–æ–π –ø–æ–ø—É–≥–∞–π")
        print()
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python parrot.py [--debug] [--help]")
        print()
        print("–û–ø—Ü–∏–∏:")
        print("  --debug, -d    –í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥")
        print("  --help, -h     –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É")
        return 0
    
    try:
        parrot = SpeechParrot(debug=debug)
        
        if debug:
            print("üîß –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤–∫–ª—é—á–µ–Ω")
        
        if not parrot.initialize():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ø—É–≥–∞—è")
            return 1
            
        parrot.run()
        return 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        if debug:
            import traceback
            traceback.print_exc()
        return 1


if __name__ == "__main__":
    exit(main())