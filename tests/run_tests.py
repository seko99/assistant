#!/usr/bin/env python3
"""
Test runner for virtual podcast components

–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–∞—Å—Ç–∞.
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python tests/run_tests.py
"""

import sys
import os
import importlib.util
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))


def run_test_module(module_path: Path) -> tuple[int, int]:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –∏–∑ –º–æ–¥—É–ª—è

    Returns:
        Tuple (passed_tests, total_tests)
    """
    spec = importlib.util.spec_from_file_location("test_module", module_path)
    test_module = importlib.util.module_from_spec(spec)

    passed = 0
    total = 0

    try:
        spec.loader.exec_module(test_module)

        # –ù–∞–π–¥–µ–º –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –∏ –º–µ—Ç–æ–¥—ã
        for name in dir(test_module):
            obj = getattr(test_module, name)
            if name.startswith('Test') and hasattr(obj, '__dict__'):
                test_class = obj()

                for method_name in dir(test_class):
                    if method_name.startswith('test_'):
                        total += 1
                        try:
                            method = getattr(test_class, method_name)
                            method()
                            print(f"  ‚úÖ {method_name}")
                            passed += 1
                        except Exception as e:
                            print(f"  ‚ùå {method_name}: {e}")

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è: {e}")

    return passed, total


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–∞—Å—Ç–∞")
    print("=" * 50)

    tests_dir = Path(__file__).parent
    test_files = list(tests_dir.glob("test_*.py"))

    if not test_files:
        print("‚ùå –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return 1

    total_passed = 0
    total_tests = 0

    for test_file in test_files:
        print(f"\nüìù –ó–∞–ø—É—Å–∫ {test_file.name}:")
        passed, tests = run_test_module(test_file)
        total_passed += passed
        total_tests += tests

        if tests > 0:
            percentage = (passed / tests) * 100
            status = "‚úÖ" if passed == tests else "‚ö†Ô∏è"
            print(f"  {status} {passed}/{tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({percentage:.1f}%)")
        else:
            print("  ‚ö†Ô∏è –¢–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    print("\n" + "=" * 50)
    print(f"üìä –ò—Ç–æ–≥–æ: {total_passed}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")

    if total_tests > 0:
        success_rate = (total_passed / total_tests) * 100
        if success_rate == 100:
            print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            return 0
        elif success_rate >= 80:
            print(f"‚úÖ –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({success_rate:.1f}%)")
            return 0
        else:
            print(f"‚ö†Ô∏è –ú–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ ({success_rate:.1f}%)")
            return 1
    else:
        print("‚ùå –¢–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
        return 1


if __name__ == "__main__":
    try:
        exit_code = main()
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)