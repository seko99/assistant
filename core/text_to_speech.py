"""
Text-to-speech module using Silero TTS.
"""

import time
import os
from pathlib import Path
from typing import Optional

import sounddevice as sd
import torch
import torchaudio

from utils.config_keys import ConfigKeys


class TextToSpeech:
    """–°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ Silero TTS"""

    def __init__(self, config):
        self.config = config
        self.assistant_config = config[ConfigKeys.ASSISTANT]
        self.model = None
        self.sample_rate = self.assistant_config[ConfigKeys.TTS.TTS_SAMPLE_RATE]
        self.speaker = self.assistant_config[ConfigKeys.TTS.TTS_SPEAKER]
        self.use_accentizer = self.assistant_config.get(ConfigKeys.TTS.USE_ACCENTIZER, False)
        self.accentizer = None

    def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ Silero TTS"""
        try:
            print("üîç –ó–∞–≥—Ä—É–∑–∫–∞ Silero TTS...")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å Silero
            device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
            self.model, example_text = torch.hub.load(
                repo_or_dir='snakers4/silero-models',
                model='silero_tts',
                language='ru',
                speaker='ru_v3'
            )
            self.model.to(device)

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ü–µ–Ω—Ç–∏–∑–∞—Ç–æ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if self.use_accentizer:
                try:
                    from ruaccent import RUAccent
                    self.accentizer = RUAccent()
                    self.accentizer.load(omograph_model_size='turbo', use_dictionary=True)
                    print("‚úÖ RUAccent –∑–∞–≥—Ä—É–∂–µ–Ω")
                except ImportError:
                    print("‚ö†Ô∏è RUAccent –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Å–∏–Ω—Ç–µ–∑ –±–µ–∑ —É–¥–∞—Ä–µ–Ω–∏–π")
                    self.use_accentizer = False

            print(f"‚úÖ Silero TTS –≥–æ—Ç–æ–≤ (–¥–∏–Ω–∞–º–∏–∫: {self.speaker})")
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Silero TTS: {e}")
            return False

    def synthesize_and_play(self, text, voice_override: Optional[str] = None, save_path: Optional[str] = None):
        """
        –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ—Ç –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Ä–µ—á—å

        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞
            voice_override: –ì–æ–ª–æ—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            save_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        if not self.model or not text.strip():
            return False

        start_time = time.time()
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ–ª–æ—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            speaker_to_use = voice_override if voice_override else self.speaker

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∞–∫—Ü–µ–Ω—Ç–∏–∑–∞—Ç–æ—Ä–æ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            processed_text = text
            if self.use_accentizer and self.accentizer:
                processed_text = self.accentizer.process_all(text)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ
            audio = self.model.apply_tts(
                text=processed_text,
                speaker=speaker_to_use,
                sample_rate=self.sample_rate
            )

            audio_np = audio.detach().cpu().numpy()
            synthesis_time = time.time() - start_time
            print(f"üó£Ô∏è –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º ({speaker_to_use}): {text} (–≤—Ä–µ–º—è: {synthesis_time:.3f}s)")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å
            if save_path:
                self._save_audio_file(audio, save_path)
                print(f"üíæ –ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {save_path}")

            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º
            sd.play(audio_np, self.sample_rate)
            sd.wait()  # –ñ–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è

            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏: {e}")
            return False

    def synthesize_only(self, text, voice_override: Optional[str] = None, save_path: Optional[str] = None):
        """
        –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ—Ç —Ä–µ—á—å –±–µ–∑ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è (–¥–ª—è —Ä–µ–∂–∏–º–∞ --no-audio)

        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞
            voice_override: –ì–æ–ª–æ—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            save_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞

        Returns:
            –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None
        """
        if not self.model or not text.strip():
            return None

        start_time = time.time()
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ–ª–æ—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            speaker_to_use = voice_override if voice_override else self.speaker

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∞–∫—Ü–µ–Ω—Ç–∏–∑–∞—Ç–æ—Ä–æ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            processed_text = text
            if self.use_accentizer and self.accentizer:
                processed_text = self.accentizer.process_all(text)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ
            audio = self.model.apply_tts(
                text=processed_text,
                speaker=speaker_to_use,
                sample_rate=self.sample_rate
            )

            synthesis_time = time.time() - start_time
            print(f"üîÑ –°–∏–Ω—Ç–µ–∑ ({speaker_to_use}): {text} (–≤—Ä–µ–º—è: {synthesis_time:.3f}s)")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            if save_path:
                self._save_audio_file(audio, save_path)
                print(f"üíæ –ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {save_path}")
                return save_path

            return None

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏: {e}")
            return None

    def _save_audio_file(self, audio_tensor, file_path: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞—É–¥–∏–æ —Ç–µ–Ω–∑–æ—Ä –≤ —Ñ–∞–π–ª"""
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            Path(file_path).parent.mkdir(parents=True, exist_ok=True)

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            audio_to_save = audio_tensor.unsqueeze(0) if audio_tensor.dim() == 1 else audio_tensor

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ WAV —Ñ–æ—Ä–º–∞—Ç–µ
            torchaudio.save(file_path, audio_to_save, self.sample_rate)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            raise