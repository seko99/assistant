"""
Text-to-speech module using Silero TTS.
"""

import time

import sounddevice as sd
import torch

from utils.config_keys import ConfigKeys


class TextToSpeech:
    """–°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ Silero TTS"""

    def __init__(self, config):
        self.config = config
        self.assistant_config = config[ConfigKeys.ASSISTANT]
        self.model = None
        self.sample_rate = self.assistant_config[ConfigKeys.TTS.TTS_SAMPLE_RATE]
        self.speaker = self.assistant_config[ConfigKeys.TTS.TTS_SPEAKER]
        self.use_accentizer = self.assistant_config.get(ConfigKeys.TTS.USE_ACCENTIZER, False)
        self.accentizer = None

    def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ Silero TTS"""
        try:
            print("üîç –ó–∞–≥—Ä—É–∑–∫–∞ Silero TTS...")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å Silero
            device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
            self.model, example_text = torch.hub.load(
                repo_or_dir='snakers4/silero-models',
                model='silero_tts',
                language='ru',
                speaker='ru_v3'
            )
            self.model.to(device)

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ü–µ–Ω—Ç–∏–∑–∞—Ç–æ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if self.use_accentizer:
                try:
                    from ruaccent import RUAccent
                    self.accentizer = RUAccent()
                    self.accentizer.load(omograph_model_size='turbo', use_dictionary=True)
                    print("‚úÖ RUAccent –∑–∞–≥—Ä—É–∂–µ–Ω")
                except ImportError:
                    print("‚ö†Ô∏è RUAccent –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Å–∏–Ω—Ç–µ–∑ –±–µ–∑ —É–¥–∞—Ä–µ–Ω–∏–π")
                    self.use_accentizer = False

            print(f"‚úÖ Silero TTS –≥–æ—Ç–æ–≤ (–¥–∏–Ω–∞–º–∏–∫: {self.speaker})")
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Silero TTS: {e}")
            return False

    def synthesize_and_play(self, text):
        """–°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ—Ç –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Ä–µ—á—å"""
        if not self.model or not text.strip():
            return False

        start_time = time.time()
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∞–∫—Ü–µ–Ω—Ç–∏–∑–∞—Ç–æ—Ä–æ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            processed_text = text
            if self.use_accentizer and self.accentizer:
                processed_text = self.accentizer.process_all(text)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ
            audio = self.model.apply_tts(
                text=processed_text,
                speaker=self.speaker,
                sample_rate=self.sample_rate
            )

            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º
            audio_np = audio.detach().cpu().numpy()
            synthesis_time = time.time() - start_time
            print(f"üó£Ô∏è –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º: {text} (–≤—Ä–µ–º—è: {synthesis_time:.3f}s)")

            sd.play(audio_np, self.sample_rate)
            sd.wait()  # –ñ–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è

            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏: {e}")
            return False