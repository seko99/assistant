"""
Wake word detection module using Vosk.
"""

import json
import os
import time
from collections import deque

import numpy as np
import vosk

from utils.audio_utils import convert_float32_to_int16
from utils.config_keys import ConfigKeys


class WakeWordDetector:
    """–î–µ—Ç–µ–∫—Ç–æ—Ä –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ Vosk"""

    def __init__(self, config, debug=False):
        self.config = config
        self.wake_config = config[ConfigKeys.WAKE_WORD]
        self.model = None
        self.recognizer = None
        self.keywords = self.wake_config[ConfigKeys.WakeWord.KEYWORDS]
        self.debug = debug  # –î–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞

        # –ö–æ–ª—å—Ü–µ–≤–æ–π –±—É—Ñ–µ—Ä –¥–ª—è pre-trigger –∞—É–¥–∏–æ
        self.pre_trigger_duration = self.wake_config.get(ConfigKeys.WakeWord.PRE_TRIGGER_DURATION, 3.0)
        self.sample_rate = self.wake_config[ConfigKeys.WakeWord.SAMPLE_RATE]
        self.chunk_size = self.wake_config[ConfigKeys.WakeWord.CHUNK_SIZE]
        buffer_size = int(self.sample_rate * self.pre_trigger_duration)
        self.audio_buffer = deque(maxlen=buffer_size)

    def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ Vosk"""
        model_path = self.wake_config[ConfigKeys.WakeWord.MODEL_PATH]

        if not os.path.exists(model_path):
            print(f"‚ùå –ú–æ–¥–µ–ª—å Vosk –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
            print("   –°–∫–∞—á–∞–π—Ç–µ –º–æ–¥–µ–ª—å —Å https://alphacephei.com/vosk/models")
            return False

        try:
            print(f"üîç –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Vosk: {model_path}")
            self.model = vosk.Model(model_path)

            # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
            keywords_json = json.dumps(self.keywords, ensure_ascii=False)
            sample_rate = self.wake_config[ConfigKeys.WakeWord.SAMPLE_RATE]
            self.recognizer = vosk.KaldiRecognizer(self.model, sample_rate, keywords_json)

            print(f"‚úÖ Vosk –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏: {self.keywords}")
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Vosk: {e}")
            return False

    def add_audio_to_buffer(self, audio_data):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–ª—å—Ü–µ–≤–æ–π –±—É—Ñ–µ—Ä"""
        self.audio_buffer.extend(audio_data)

    def get_pre_trigger_audio(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–µ pre-trigger –∞—É–¥–∏–æ"""
        return np.array(list(self.audio_buffer), dtype=np.float32)

    def detect_wake_word(self, audio_data):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –≤ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö"""
        if not self.recognizer:
            if self.debug:
                print("üîç DEBUG: recognizer –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            return False, ""

        # –î–æ–±–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –≤ –±—É—Ñ–µ—Ä
        self.add_audio_to_buffer(audio_data)

        # DEBUG —Å—á–µ—Ç—á–∏–∫ –≤—ã–∑–æ–≤–æ–≤
        if self.debug:
            if not hasattr(self, '_detect_count'):
                self._detect_count = 0
                print("üîç DEBUG: detect_wake_word –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É")
            self._detect_count += 1
            if self._detect_count % 50 == 0:  # –∫–∞–∂–¥—ã–µ 50 –≤—ã–∑–æ–≤–æ–≤
                print(f"üîç DEBUG: detect_wake_word –≤—ã–∑–≤–∞–Ω {self._detect_count} —Ä–∞–∑")

        start_time = time.time()
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º float32 –≤ int16 –¥–ª—è Vosk
            audio_int16 = convert_float32_to_int16(audio_data)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if self.recognizer.AcceptWaveform(audio_int16):
                result = json.loads(self.recognizer.Result())
                if 'text' in result and result['text']:
                    text = result['text'].lower()
                    if self.debug:
                        print(f"üîç Vosk —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: '{text}'")
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª—é–±–æ–≥–æ –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                    if any(keyword in text for keyword in self.keywords):
                        detection_time = time.time() - start_time
                        # –ü–æ–ª—É—á–∞–µ–º pre-trigger –∞—É–¥–∏–æ
                        pre_trigger_audio = self.get_pre_trigger_audio()
                        return True, (text, detection_time, pre_trigger_audio)
            return False, ""

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞: {e}")
            return False, ""