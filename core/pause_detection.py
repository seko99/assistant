"""
Pause detection module for speech recording.
"""

import numpy as np

from utils.audio_utils import calculate_energy
from utils.config_keys import ConfigKeys


class PauseDetector:
    """–î–µ—Ç–µ–∫—Ç–æ—Ä –ø–∞—É–∑ –≤ —Ä–µ—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —ç–Ω–µ—Ä–≥–∏–∏ —Å–∏–≥–Ω–∞–ª–∞"""

    def __init__(self, config, debug=False):
        self.config = config
        self.voice_config = config[ConfigKeys.VOICE_DETECTION]
        self.debug = debug

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ—Ç–µ–∫—Ü–∏–∏
        self.pause_threshold = self.voice_config.get(ConfigKeys.VoiceDetection.PAUSE_THRESHOLD, 3.0)  # —Å–µ–∫—É–Ω–¥—ã
        self.voice_energy_threshold = self.voice_config.get(ConfigKeys.VoiceDetection.VOICE_ENERGY_THRESHOLD, 0.01)
        self.min_recording_duration = self.voice_config.get(ConfigKeys.VoiceDetection.MIN_RECORDING_DURATION, 0.5)  # —Å–µ–∫—É–Ω–¥—ã
        self.pause_detection_enabled = self.voice_config.get(ConfigKeys.VoiceDetection.PAUSE_DETECTION_ENABLED, True)

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.sample_rate = config[ConfigKeys.WAKE_WORD][ConfigKeys.WakeWord.SAMPLE_RATE]  # –∏—Å–ø–æ–ª—å–∑—É–µ–º sample_rate –æ—Ç wake_word
        self.chunk_size = config[ConfigKeys.WAKE_WORD][ConfigKeys.WakeWord.CHUNK_SIZE]
        self.samples_per_second = self.sample_rate / self.chunk_size

        # –°—á–µ—Ç—á–∏–∫–∏
        self.reset()

    def reset(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""
        self.silence_chunks = 0
        self.total_chunks = 0
        self.noise_level = None
        self.calibration_samples = []

    def calibrate_noise_level(self, audio_chunk):
        """–ö–∞–ª–∏–±—Ä—É–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Ñ–æ–Ω–æ–≤–æ–≥–æ —à—É–º–∞"""
        if len(self.calibration_samples) < 10:  # —Å–æ–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —á–∞–Ω–∫–æ–≤ –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
            energy = calculate_energy(audio_chunk)
            self.calibration_samples.append(energy)

            if len(self.calibration_samples) == 10:
                self.noise_level = np.mean(self.calibration_samples) * 2.0  # –Ω–µ–º–Ω–æ–≥–æ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ñ–æ–Ω–∞
                if self.debug:
                    print(f"üîä –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ —à—É–º–∞: {self.noise_level:.6f}")

    def is_voice_detected(self, audio_chunk):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –≥–æ–ª–æ—Å –≤ –∞—É–¥–∏–æ —á–∞–Ω–∫–µ"""
        if not self.pause_detection_enabled:
            return True  # –≤—Å–µ–≥–¥–∞ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –≥–æ–ª–æ—Å –µ—Å—Ç—å

        energy = calculate_energy(audio_chunk)

        # –ö–∞–ª–∏–±—Ä—É–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if self.noise_level is None:
            self.calibrate_noise_level(audio_chunk)
            return True  # –≤–æ –≤—Ä–µ–º—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –≥–æ–ª–æ—Å –µ—Å—Ç—å

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ—Ä–æ–≥: –º–∞–∫—Å–∏–º—É–º –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞ –∏ –∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —à—É–º–∞
        threshold = max(self.voice_energy_threshold, self.noise_level)
        is_voice = energy > threshold

        if self.debug and self.total_chunks % 10 == 0:  # –∫–∞–∂–¥—ã–µ 10 —á–∞–Ω–∫–æ–≤
            print(f"üîä –≠–Ω–µ—Ä–≥–∏—è: {energy:.6f}, –ø–æ—Ä–æ–≥: {threshold:.6f}, –≥–æ–ª–æ—Å: {is_voice}")

        return is_voice

    def should_stop_recording(self, audio_chunk, recording_duration):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å"""
        if not self.pause_detection_enabled:
            return False

        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–±–ª—é–¥–µ–Ω–∞
        if recording_duration < self.min_recording_duration:
            return False

        self.total_chunks += 1

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥–æ–ª–æ—Å–∞
        if self.is_voice_detected(audio_chunk):
            self.silence_chunks = 0  # —Å–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ —Ç–∏—à–∏–Ω—ã
        else:
            self.silence_chunks += 1

        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Ç–∏—à–∏–Ω—ã
        silence_duration = self.silence_chunks / self.samples_per_second

        if self.debug and self.silence_chunks > 0 and self.silence_chunks % 5 == 0:
            print(f"ü§´ –¢–∏—à–∏–Ω–∞: {silence_duration:.1f}s –∏–∑ {self.pause_threshold}s")

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞ —Ç–∏—à–∏–Ω—ã
        return silence_duration >= self.pause_threshold