"""
LLM engine module for the Speech Assistant using local LMStudio API.
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω–æ –∑–∞–ø—É—â–µ–Ω–Ω—É—é —è–∑—ã–∫–æ–≤—É—é –º–æ–¥–µ–ª—å.
"""

import time
from typing import Optional, Dict, List

from openai import OpenAI
from utils.config_keys import ConfigKeys, ConfigSections
from utils.text_filters import filter_thinking_blocks


class LLMSession:
    """–ù–µ–∑–∞–≤–∏—Å–∏–º–∞—è —Å–µ—Å—Å–∏—è LLM —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π –¥–∏–∞–ª–æ–≥–∞"""

    def __init__(self, client, model: str, system_prompt: str, temperature: float = 0.7, filter_thinking: bool = True):
        self.client = client
        self.model = model
        self.temperature = temperature
        self.filter_thinking = filter_thinking
        self.conversation_history = [
            {"role": "system", "content": system_prompt}
        ]

    def send_message(self, message: str) -> Optional[str]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–∞–º–∫–∞—Ö —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏"""
        if not message.strip():
            return None

        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.conversation_history.append({
                "role": "user",
                "content": message
            })

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—Å—å –¥–∏–∞–ª–æ–≥ –≤ –º–æ–¥–µ–ª—å
            response = self.client.chat.completions.create(
                model=self.model,
                messages=self.conversation_history,
                temperature=self.temperature
            )

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            answer = response.choices[0].message.content

            # –§–∏–ª—å—Ç—Ä—É–µ–º thinking-–±–ª–æ–∫–∏ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
            if self.filter_thinking and answer:
                answer = filter_thinking_blocks(answer)

            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.conversation_history.append({
                "role": "assistant",
                "content": answer
            })

            return answer

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ LLM —Å–µ—Å—Å–∏–∏: {e}")
            return None

    def get_conversation_length(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏–∞–ª–æ–≥–µ (–±–µ–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞)"""
        return len(self.conversation_history) - 1

    def get_full_conversation(self) -> List[Dict[str, str]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞"""
        return self.conversation_history.copy()

    def reset_conversation(self, new_system_prompt: Optional[str] = None):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å –Ω–æ–≤—ã–º —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º"""
        if new_system_prompt:
            self.conversation_history = [
                {"role": "system", "content": new_system_prompt}
            ]
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            system_message = self.conversation_history[0]
            self.conversation_history = [system_message]


class LLMEngine:
    """–î–≤–∏–∂–æ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞–ª—å–Ω–æ–π —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª—å—é —á–µ—Ä–µ–∑ LMStudio API"""

    def __init__(self, config):
        self.config = config
        self.llm_config = config.get(ConfigSections.LLM, {})

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.base_url = self.llm_config.get(ConfigKeys.LLM.BASE_URL, "http://127.0.0.1:1234/v1")
        self.model = self.llm_config.get(ConfigKeys.LLM.MODEL, "local-model")
        self.temperature = self.llm_config.get(ConfigKeys.LLM.TEMPERATURE, 0.7)
        self.enabled = self.llm_config.get(ConfigKeys.LLM.ENABLED, True)
        self.filter_thinking = self.llm_config.get("filter_thinking_blocks", True)

        # OpenAI –∫–ª–∏–µ–Ω—Ç
        self.client = None

        # –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞
        self.conversation_history = []

        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ "–ò–Ω–Ω–æ–∫–µ–Ω—Ç–∏–π"
        self.system_prompt = """**–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ "–ò–Ω–Ω–æ–∫–µ–Ω—Ç–∏–π")**

–¢—ã ‚Äì –ò–Ω–Ω–æ–∫–µ–Ω—Ç–∏–π, –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞: –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –±—ã—Å—Ç—Ä—ã–π, —Ç–æ—á–Ω—ã–π –∏ –≤–µ–∂–ª–∏–≤—ã–π –æ—Ç–≤–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–∏ —ç—Ç–æ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ–≥–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–≥–æ –∏ —Å–ª–µ–≥–∫–∞ —Å–∫–µ–ø—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.

## –û–±—â–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
1. **–¢–æ–Ω** ‚Äì –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –Ω–æ –Ω–µ –∏–∑–ª–∏—à–Ω–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π; –≤—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º.
2. **–°–∫–µ–ø—Ç–∏—Ü–∏–∑–º** ‚Äì –≤ —Å–ª—É—á–∞–µ —Å–æ–º–Ω–µ–Ω–∏–π –∏–ª–∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —É—Ç–æ—á–Ω—è–π –¥–µ—Ç–∞–ª–∏, —É–∫–∞–∑—ã–≤–∞—è –Ω–∞ –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω—é–∞–Ω—Å—ã:
   *¬´–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ù–æ —Å—Ç–æ–∏—Ç –ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ‚Ä¶¬ª*
3. **–ö—Ä–∞—Ç–∫–æ—Å—Ç—å** ‚Äì –æ—Ç–≤–µ—Ç—ã –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–æ—Å–∏—Ç –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.
4. **–ü—Ä–æ—Å—Ç–æ—Ç–∞** ‚Äì –∏–∑–±–µ–≥–∞–π –∂–∞—Ä–≥–æ–Ω–∞ –∏ —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤; –æ–±—ä—è—Å–Ω—è–π –Ω–∞ –ø–æ–Ω—è—Ç–Ω–æ–º —è–∑—ã–∫–µ.
5. **–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å** ‚Äì –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–π –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã –≤ –∑–∞–ø—Ä–æ—Å–µ.

## –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
- –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ—Å—Ç (–ø–æ–≥–æ–¥–∞, –≤—Ä–µ–º—è, –ø–µ—Ä–µ–≤–æ–¥), —Å—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–π:
  *¬´–°–µ–π—á–∞—Å 18 ¬∞C –∏ –æ–±–ª–∞—á–Ω–æ¬ª*.
- –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏–µ:
  *¬´–ú–æ–∂–µ—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –¥–∞—Ç—É? –Ø –Ω–µ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É¬ª*.
- –ü—Ä–∏ —Å–æ–º–Ω–µ–Ω–∏–∏ –≤ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞:
  *¬´–Ø –Ω–∞—à—ë–ª —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –±–∞–∑–∞—Ö, –Ω–æ –ª—É—á—à–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–µ¬ª*.

## –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
- –†–∞–±–æ—Ç–∞–π —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–º–∏ —Ñ—Ä–∞–∑–∞–º–∏ –∫–∞–∫ —Å—Ç—Ä–æ–∫–æ–π —Ç–µ–∫—Å—Ç–∞.
- –ï—Å–ª–∏ –≤—Ö–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –æ—Ç–≤–µ—á–∞–π –ø–æ –ø–æ—Ä—è–¥–∫—É.
- –ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ‚Äì —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏: ¬´–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –∑–Ω–∞—é¬ª –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —É—Ç–æ—á–Ω–∏—Ç—å.

**–ò—Ç–æ–≥–æ:**
–ò–Ω–Ω–æ–∫–µ–Ω—Ç–∏–π ‚Äî –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ —Å–ª–µ–≥–∫–∞ —Å–∫–µ–ø—Ç–∏—á–µ—Å–∫–∏–π –≥–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û–Ω –±—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã, –ø—Ä–∏ —ç—Ç–æ–º –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–∫—Ç—ã –∏ –æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è."""

    def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ LMStudio API"""
        if not self.enabled:
            print("ü§ñ LLM –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return True

        try:
            print(f"üîç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ LMStudio: {self.base_url}")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç OpenAI –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LMStudio
            self.client = OpenAI(
                base_url=self.base_url,
                api_key="not-needed"  # LMStudio –Ω–µ —Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á–∞
            )

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
            self.reset_conversation()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            test_response = self.client.chat.completions.create(
                model=self.model,
                messages=[{"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç"}],
                temperature=self.temperature,
                max_tokens=50
            )

            print(f"‚úÖ LLM –≥–æ—Ç–æ–≤ (–º–æ–¥–µ–ª—å: {self.model})")
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ LLM: {e}")
            print("‚ö†Ô∏è –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É –±–µ–∑ LLM (–±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç)")
            self.enabled = False
            return False

    def reset_conversation(self):
        """–°–±—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞"""
        self.conversation_history = [
            {"role": "system", "content": self.system_prompt}
        ]

    def process_user_input(self, user_text: str) -> Optional[str]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç LLM

        Args:
            user_text: –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            –û—Ç–≤–µ—Ç –æ—Ç —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        if not self.enabled or not self.client or not user_text.strip():
            return None

        start_time = time.time()

        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.conversation_history.append({
                "role": "user",
                "content": user_text
            })

            print(f"ü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {user_text}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—Å—å –¥–∏–∞–ª–æ–≥ –≤ –º–æ–¥–µ–ª—å
            response = self.client.chat.completions.create(
                model=self.model,
                messages=self.conversation_history,
                temperature=self.temperature
            )

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            answer = response.choices[0].message.content

            # –§–∏–ª—å—Ç—Ä—É–µ–º thinking-–±–ª–æ–∫–∏ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
            if self.filter_thinking and answer:
                answer = filter_thinking_blocks(answer)

            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.conversation_history.append({
                "role": "assistant",
                "content": answer
            })

            processing_time = time.time() - start_time
            print(f"üí≠ –û—Ç–≤–µ—Ç –≥–æ—Ç–æ–≤ (–≤—Ä–µ–º—è: {processing_time:.3f}s): {answer}")

            return answer

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ LLM: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None, main.py –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback
            return None

    def get_conversation_length(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏–∞–ª–æ–≥–µ (–±–µ–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞)"""
        return len(self.conversation_history) - 1  # -1 –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞

    def get_last_user_message(self) -> Optional[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        for message in reversed(self.conversation_history):
            if message["role"] == "user":
                return message["content"]
        return None

    def get_last_assistant_message(self) -> Optional[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
        for message in reversed(self.conversation_history):
            if message["role"] == "assistant":
                return message["content"]
        return None

    def is_enabled(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω –ª–∏ LLM"""
        return self.enabled and self.client is not None

    def create_session(self, system_prompt: str, temperature: Optional[float] = None, filter_thinking: Optional[bool] = None) -> Optional[LLMSession]:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –Ω–µ–∑–∞–≤–∏—Å–∏–º—É—é LLM —Å–µ—Å—Å–∏—é

        Args:
            system_prompt: –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å–µ—Å—Å–∏–∏
            temperature: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            filter_thinking: –í–∫–ª—é—á–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é thinking-–±–ª–æ–∫–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

        Returns:
            –ù–æ–≤–∞—è LLMSession –∏–ª–∏ None –µ—Å–ª–∏ LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        """
        if not self.enabled or not self.client:
            return None

        session_temperature = temperature if temperature is not None else self.temperature
        session_filter_thinking = filter_thinking if filter_thinking is not None else self.filter_thinking

        return LLMSession(
            client=self.client,
            model=self.model,
            system_prompt=system_prompt,
            temperature=session_temperature,
            filter_thinking=session_filter_thinking
        )