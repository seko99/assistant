#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∞–∫—Ü–µ–Ω—Ç–∏–∑–∞—Ç–æ—Ä–∞ –≤ –ø–æ–¥–∫–∞—Å—Ç-—Å–∏—Å—Ç–µ–º–µ
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –ø–æ–¥–∫–∞—Å—Ç–∞
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))


def test_config_accentizer_setting():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∞–∫—Ü–µ–Ω—Ç–∏–∑–∞—Ç–æ—Ä–∞ –≤ –∫–æ–Ω—Ñ–∏–≥–µ"""
    print("üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫—Ü–µ–Ω—Ç–∏–∑–∞—Ç–æ—Ä–∞ –≤ –∫–æ–Ω—Ñ–∏–≥–µ...")

    config_file = "/home/seko/Projects/ai/assistant/config.json"

    if not os.path.exists(config_file):
        print("‚ùå –§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False

    import json
    with open(config_file, 'r', encoding='utf-8') as f:
        config = json.load(f)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ use_accentizer
    assistant_config = config.get('assistant', {})
    use_accentizer = assistant_config.get('use_accentizer', False)

    if use_accentizer:
        print("‚úÖ use_accentizer –≤–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ")
        return True
    else:
        print("‚ö†Ô∏è use_accentizer –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ")
        return False


def test_tts_accentizer_support():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É –∞–∫—Ü–µ–Ω—Ç–∏–∑–∞—Ç–æ—Ä–∞ –≤ TextToSpeech –º–æ–¥—É–ª–µ"""
    print("\nüß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∞–∫—Ü–µ–Ω—Ç–∏–∑–∞—Ç–æ—Ä–∞ –≤ TextToSpeech...")

    tts_file = "/home/seko/Projects/ai/assistant/core/text_to_speech.py"

    if not os.path.exists(tts_file):
        print("‚ùå –§–∞–π–ª text_to_speech.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False

    with open(tts_file, 'r', encoding='utf-8') as f:
        content = f.read()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∞–∫—Ü–µ–Ω—Ç–∏–∑–∞—Ç–æ—Ä–∞
    accentizer_features = [
        'self.use_accentizer',
        'self.accentizer',
        'from ruaccent import RUAccent',
        'process_all(text)'
    ]

    missing_features = []
    for feature in accentizer_features:
        if feature in content:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞: {feature}")
        else:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {feature}")
            missing_features.append(feature)

    return len(missing_features) == 0


def test_orchestrator_logging():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ orchestrator.py"""
    print("\nüß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ü–µ–Ω—Ç–∏–∑–∞—Ç–æ—Ä–∞ –≤ PodcastOrchestrator...")

    orchestrator_file = "/home/seko/Projects/ai/assistant/podcast/orchestrator.py"

    if not os.path.exists(orchestrator_file):
        print("‚ùå –§–∞–π–ª orchestrator.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False

    with open(orchestrator_file, 'r', encoding='utf-8') as f:
        content = f.read()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging_features = [
        '–ê–∫—Ü–µ–Ω—Ç–∏–∑–∞—Ç–æ—Ä:',
        'accentizer_status',
        '[—Å —É–¥–∞—Ä–µ–Ω–∏—è–º–∏]',
        'tts_engine.use_accentizer'
    ]

    found_features = []
    for feature in logging_features:
        if feature in content:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: {feature}")
            found_features.append(feature)
        else:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: {feature}")

    return len(found_features) >= 3  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã 3 –∏–∑ 4 —ç–ª–µ–º–µ–Ω—Ç–æ–≤


def test_virtual_podcast_tts_creation():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ TTS —Å –∫–æ–Ω—Ñ–∏–≥–æ–º –≤ virtual_podcast.py"""
    print("\nüß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è TTS –≤ virtual_podcast.py...")

    vp_file = "/home/seko/Projects/ai/assistant/virtual_podcast.py"

    if not os.path.exists(vp_file):
        print("‚ùå –§–∞–π–ª virtual_podcast.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False

    with open(vp_file, 'r', encoding='utf-8') as f:
        content = f.read()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ TTS —Å –∫–æ–Ω—Ñ–∏–≥–æ–º
    tts_creation_patterns = [
        'TextToSpeech(config)',
        'tts_engine = TextToSpeech',
        'orchestrator = PodcastOrchestrator(config, llm_engine, tts_engine)'
    ]

    for pattern in tts_creation_patterns:
        if pattern in content:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω: {pattern}")
        else:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω: {pattern}")
            return False

    return True


def simulate_accentizer_process():
    """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–∞ –∞–∫—Ü–µ–Ω—Ç–∏–∑–∞—Ç–æ—Ä–æ–º"""
    print("\nüß™ –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∞–∫—Ü–µ–Ω—Ç–∏–∑–∞—Ç–æ—Ä–æ–º...")

    test_texts = [
        "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?",
        "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –±—ã—Å—Ç—Ä–æ",
        "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –º–µ–Ω—è—é—Ç –Ω–∞—à—É –∂–∏–∑–Ω—å",
        "–≠–∫–æ–Ω–æ–º–∏–∫–∞ –∏ –±–∏–∑–Ω–µ—Å —Ç—Ä–µ–±—É—é—Ç –∞–Ω–∞–ª–∏–∑–∞"
    ]

    # –°–∏–º—É–ª–∏—Ä—É–µ–º —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ
    for text in test_texts:
        # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–¥–∞—Ä–µ–Ω–∏–π (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ RUAccent)
        processed = text.replace('–∞', '–∞ÃÅ').replace('–µ', '–µÃÅ')[:50]  # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è
        print(f"üìù –ò—Å—Ö–æ–¥–Ω—ã–π: {text}")
        print(f"üî§ –° —É–¥–∞—Ä–µ–Ω–∏—è–º–∏: {processed}")
        print()

    print("‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫—Ü–µ–Ω—Ç–∏–∑–∞—Ç–æ—Ä–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    return True


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üéôÔ∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ê–ö–¶–ï–ù–¢–ò–ó–ê–¢–û–†–ê –í –ü–û–î–ö–ê–°–¢-–°–ò–°–¢–ï–ú–ï")
    print("=" * 70)

    tests = [
        ("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥–µ", test_config_accentizer_setting),
        ("–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ TTS", test_tts_accentizer_support),
        ("–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–µ", test_orchestrator_logging),
        ("–°–æ–∑–¥–∞–Ω–∏–µ TTS –≤ —Å–∫—Ä–∏–ø—Ç–µ", test_virtual_podcast_tts_creation),
        ("–°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", simulate_accentizer_process)
    ]

    passed = 0
    total = len(tests)

    for test_name, test_func in tests:
        print(f"\nüìã {test_name}:")
        try:
            if test_func():
                passed += 1
                print(f"‚úÖ {test_name}: –£–°–ü–ï–®–ù–û")
            else:
                print(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e}")

    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")

    if passed == total:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("‚úÖ –ê–∫—Ü–µ–Ω—Ç–∏–∑–∞—Ç–æ—Ä –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ –ø–æ–¥–∫–∞—Å—Ç-—Å–∏—Å—Ç–µ–º—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        print("\nüí° –ß–¢–û –ü–†–û–ò–°–•–û–î–ò–¢ –ü–†–ò –†–ê–ë–û–¢–ï:")
        print("   1. virtual_podcast.py —Å–æ–∑–¥–∞–µ—Ç TextToSpeech —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ñ–∏–≥–æ–º")
        print("   2. TextToSpeech –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç RUAccent –ø—Ä–∏ use_accentizer=true")
        print("   3. PodcastOrchestrator –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π tts_engine")
        print("   4. –ü—Ä–∏ —Å–∏–Ω—Ç–µ–∑–µ —Ä–µ—á–∏ —Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∞–∫—Ü–µ–Ω—Ç–∏–∑–∞—Ç–æ—Ä")
        print("   5. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–∫—Ü–µ–Ω—Ç–∏–∑–∞—Ç–æ—Ä–∞")
        print("\nüó£Ô∏è –†–ï–ó–£–õ–¨–¢–ê–¢: –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–¥–∫–∞—Å—Ç–∞ –≥–æ–≤–æ—Ä—è—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —É–¥–∞—Ä–µ–Ω–∏—è–º–∏!")
        return 0
    else:
        print(f"\n‚ö†Ô∏è {total - passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é.")
        return 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)