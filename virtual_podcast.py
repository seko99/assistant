#!/usr/bin/env python3
"""
Virtual Podcast Generator

–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–¥–∫–∞—Å—Ç —Å —É—á–∞—Å—Ç–∏–µ–º –ò–ò-–ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é —Ç–µ–º—É.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: LLM Engine –∏ Text-to-Speech.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python virtual_podcast.py --topic "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"
    python virtual_podcast.py --topic "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã" --rounds 2 --no-audio
"""

import sys
import argparse
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from core.llm_engine import LLMEngine
from core.text_to_speech import TextToSpeech
from podcast.orchestrator import PodcastOrchestrator
from utils.config import load_config


def create_parser() -> argparse.ArgumentParser:
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(
        description="–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–∞—Å—Ç–∞",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

  # –ë–∞–∑–æ–≤—ã–π –ø–æ–¥–∫–∞—Å—Ç –Ω–∞ 3 —Ä–∞—É–Ω–¥–∞ —Å –∞—É–¥–∏–æ
  python virtual_podcast.py --topic "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"

  # –ö–æ—Ä–æ—Ç–∫–∏–π –ø–æ–¥–∫–∞—Å—Ç –±–µ–∑ –∞—É–¥–∏–æ
  python virtual_podcast.py --topic "–ë—É–¥—É—â–µ–µ —Ä–∞–±–æ—Ç—ã" --rounds 2 --no-audio

  # –ü–æ–¥–∫–∞—Å—Ç —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π –≤—ã–≤–æ–¥–∞
  python virtual_podcast.py --topic "–ö–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è" --output-dir ./my_podcasts

  # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
  python virtual_podcast.py

–£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–¥–∫–∞—Å—Ç–∞:
  - –ú–∞–∫—Å–∏–º (–º–æ–¥–µ—Ä–∞—Ç–æ—Ä) - –æ–ø—ã—Ç–Ω—ã–π –∂—É—Ä–Ω–∞–ª–∏—Å—Ç
  - –ê–Ω–Ω–∞ (—Ç–µ—Ö—ç–∫—Å–ø–µ—Ä—Ç) - IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç
  - –î–º–∏—Ç—Ä–∏–π (–±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫) - —Å—Ç—Ä–∞—Ç–µ–≥ –∏ —ç–∫–æ–Ω–æ–º–∏—Å—Ç
  - –ï–ª–µ–Ω–∞ (—Å–æ—Ü–∏–æ–ª–æ–≥) - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–∞–º
        """
    )

    parser.add_argument(
        '--topic', '-t',
        type=str,
        help='–¢–µ–º–∞ –ø–æ–¥–∫–∞—Å—Ç–∞ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è'
    )

    parser.add_argument(
        '--rounds', '-r',
        type=int,
        default=None,
        help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤ –æ–±—Å—É–∂–¥–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 3)'
    )

    parser.add_argument(
        '--output-dir', '-o',
        type=str,
        default=None,
        help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: output/podcast_YYYYMMDD_HHMMSS)'
    )

    parser.add_argument(
        '--no-audio',
        action='store_true',
        help='–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –±–µ–∑ –∞—É–¥–∏–æ —Å–∏–Ω—Ç–µ–∑–∞'
    )

    parser.add_argument(
        '--config', '-c',
        type=str,
        default='config.json',
        help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: config.json)'
    )

    parser.add_argument(
        '--list-voices',
        action='store_true',
        help='–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤ –∏ –≤—ã–π—Ç–∏'
    )

    parser.add_argument(
        '--dry-run',
        action='store_true',
        help='–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ - –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –≤—ã–π—Ç–∏'
    )

    parser.add_argument(
        '--verbose', '-v',
        action='store_true',
        help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥'
    )

    return parser


def get_topic_interactively() -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–º—É –ø–æ–¥–∫–∞—Å—Ç–∞ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
    print("üéôÔ∏è –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–∞—Å—Ç–∞")
    print()
    print("–£—á–∞—Å—Ç–Ω–∏–∫–∏:")
    print("  ‚Ä¢ –ú–∞–∫—Å–∏–º (–º–æ–¥–µ—Ä–∞—Ç–æ—Ä) - –æ–ø—ã—Ç–Ω—ã–π –∂—É—Ä–Ω–∞–ª–∏—Å—Ç")
    print("  ‚Ä¢ –ê–Ω–Ω–∞ (—Ç–µ—Ö—ç–∫—Å–ø–µ—Ä—Ç) - IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç")
    print("  ‚Ä¢ –î–º–∏—Ç—Ä–∏–π (–±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫) - —Å—Ç—Ä–∞—Ç–µ–≥ –∏ —ç–∫–æ–Ω–æ–º–∏—Å—Ç")
    print("  ‚Ä¢ –ï–ª–µ–Ω–∞ (—Å–æ—Ü–∏–æ–ª–æ–≥) - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–∞–º")
    print()

    while True:
        topic = input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è: ").strip()
        if topic:
            return topic
        print("‚ö†Ô∏è –¢–µ–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


def show_voice_list():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤"""
    print("üó£Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞ Silero TTS:")
    print()
    voices = [
        ("aidar", "–ú—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞)"),
        ("kseniya", "–ñ–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ç–µ—Ö—ç–∫—Å–ø–µ—Ä—Ç–∞)"),
        ("eugene", "–ú—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞)"),
        ("baya", "–ñ–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å–æ—Ü–∏–æ–ª–æ–≥–∞)"),
        ("irina", "–ñ–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å"),
        ("madirus", "–ú—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å"),
        ("ruslan", "–ú—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å")
    ]

    for voice, description in voices:
        print(f"  ‚Ä¢ {voice:<10} - {description}")

    print()
    print("–ì–æ–ª–æ—Å–∞ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è –≤ config.json –≤ —Å–µ–∫—Ü–∏–∏ podcast.participants")


def validate_environment() -> tuple[bool, list[str]]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    issues = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    try:
        import torch
        if not torch.cuda.is_available():
            issues.append("CUDA –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - TTS –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ CPU")
    except ImportError:
        issues.append("PyTorch –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    try:
        import sounddevice as sd
    except ImportError:
        issues.append("sounddevice –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    try:
        import torchaudio
    except ImportError:
        issues.append("torchaudio –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not os.path.exists('output'):
        try:
            os.makedirs('output')
        except Exception as e:
            issues.append(f"–ù–µ —É–¥–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é output: {e}")

    return len(issues) == 0 or all("CUDA" in issue for issue in issues), issues


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = create_parser()
    args = parser.parse_args()

    # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤ –∏ –≤—ã–π—Ç–∏
    if args.list_voices:
        show_voice_list()
        return 0

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    env_ok, env_issues = validate_environment()
    if args.verbose and env_issues:
        for issue in env_issues:
            print(f"‚ö†Ô∏è {issue}")

    if not env_ok:
        print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º:")
        for issue in env_issues:
            if "CUDA" not in issue:  # CUDA –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
                print(f"  ‚Ä¢ {issue}")
        return 1

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    print(f"üìù –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {args.config}")
    config = load_config(args.config)
    if not config:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ {args.config}")
        return 1

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É
    topic = args.topic
    if not topic:
        try:
            topic = get_topic_interactively()
        except KeyboardInterrupt:
            print("\nüëã –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return 0

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    rounds = args.rounds
    output_dir = args.output_dir
    no_audio = args.no_audio

    if args.verbose:
        print(f"üéØ –¢–µ–º–∞: {topic}")
        print(f"üîÑ –†–∞—É–Ω–¥–æ–≤: {rounds or config.get('podcast', {}).get('default_rounds', 3)}")
        print(f"üîä –ê—É–¥–∏–æ: {'–æ—Ç–∫–ª—é—á–µ–Ω–æ' if no_audio else '–≤–∫–ª—é—á–µ–Ω–æ'}")
        print(f"üìÅ –í—ã–≤–æ–¥: {output_dir or '–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'}")

    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
    if args.dry_run:
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        print("üß™ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω")
        return 0

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")

        llm_engine = LLMEngine(config)
        if not llm_engine.initialize():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å LLM Engine")
            return 1

        tts_engine = TextToSpeech(config)
        if not tts_engine.initialize():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Text-to-Speech")
            return 1

        # –°–æ–∑–¥–∞–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
        orchestrator = PodcastOrchestrator(config, llm_engine, tts_engine)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–¥–∫–∞—Å—Ç
        print(f"üéôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Å—Ç–∞ –Ω–∞ —Ç–µ–º—É: '{topic}'")
        session = orchestrator.start_podcast(
            topic=topic,
            rounds=rounds,
            output_dir=output_dir,
            no_audio=no_audio
        )

        print(f"‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –ø–æ–¥–∫–∞—Å—Ç–∞ (ID: {session.session_id})")
        success = orchestrator.run_podcast()

        if success:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
            results = orchestrator.save_results()

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print("\nüéâ –ü–æ–¥–∫–∞—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
            print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {session.output_directory}")

            if results:
                print("üìÑ –§–∞–π–ª—ã:")
                for file_type, file_path in results.items():
                    print(f"  ‚Ä¢ {file_type}: {file_path}")

            if session.transcript:
                print(f"üìù –†–µ–ø–ª–∏–∫: {len(session.transcript)}")
                print(f"‚è±Ô∏è –†–∞—É–Ω–¥–æ–≤: {session.current_round}")

            return 0
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–∫–∞—Å—Ç–∞")
            return 1

    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ü–æ–¥–∫–∞—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        if 'session' in locals() and session:
            print(f"üíæ –ß–∞—Å—Ç–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {session.output_directory}")
        return 0

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        return 1


if __name__ == "__main__":
    try:
        exit_code = main()
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        sys.exit(0)