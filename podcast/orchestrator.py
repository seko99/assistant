"""
Podcast orchestrator module.

This module handles the main flow of the virtual podcast, including
participant management, turn-taking, and session coordination.
"""

import os
import time
from datetime import datetime
from typing import Dict, List, Optional, Any
from pathlib import Path

from .session import PodcastSession, ParticipantRole
from .persona import ParticipantManager, ParticipantProfile
from .context_enricher import PodcastContextEnricher, EnrichedContext
from .context_splitter import ContextSplitter
from core.llm_engine import LLMEngine, LLMSession
from core.text_to_speech import TextToSpeech
from utils.text_filters import filter_thinking_blocks


class PodcastOrchestrator:
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–∞—Å—Ç–∞"""

    def __init__(self, config: Dict[str, Any], llm_engine: LLMEngine, tts_engine: TextToSpeech):
        self.config = config
        self.podcast_config = config.get('podcast', {})
        self.llm_engine = llm_engine
        self.tts_engine = tts_engine

        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ–¥–∫–∞—Å—Ç–∞
        self.participant_manager = ParticipantManager()
        self.context_enricher = PodcastContextEnricher(self.podcast_config)
        self.context_splitter = ContextSplitter()

        # –¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è
        self.current_session: Optional[PodcastSession] = None
        self.participant_contexts: Dict[str, Dict[str, Any]] = {}
        self.llm_sessions: Dict[str, LLMSession] = {}

        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ü–µ–Ω—Ç–∏–∑–∞—Ç–æ—Ä–∞
        accentizer_status = "–≤–∫–ª—é—á–µ–Ω" if tts_engine.use_accentizer else "–æ—Ç–∫–ª—é—á–µ–Ω"
        accentizer_loaded = "–∑–∞–≥—Ä—É–∂–µ–Ω" if (tts_engine.use_accentizer and tts_engine.accentizer) else "–Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω"
        print(f"üî§ –ê–∫—Ü–µ–Ω—Ç–∏–∑–∞—Ç–æ—Ä: {accentizer_status}, –º–æ–¥–µ–ª—å: {accentizer_loaded}")

    def start_podcast(self, topic: str, rounds: Optional[int] = None,
                     output_dir: Optional[str] = None, no_audio: bool = False) -> PodcastSession:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤—ã–π –ø–æ–¥–∫–∞—Å—Ç

        Args:
            topic: –¢–µ–º–∞ –ø–æ–¥–∫–∞—Å—Ç–∞
            rounds: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            no_audio: –†–µ–∂–∏–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –±–µ–∑ –∞—É–¥–∏–æ

        Returns:
            –°–æ–∑–¥–∞–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –ø–æ–¥–∫–∞—Å—Ç–∞
        """
        print(f"üéôÔ∏è –ó–∞–ø—É—Å–∫ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–∞—Å—Ç–∞ –Ω–∞ —Ç–µ–º—É: {topic}")

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        session_id = f"podcast_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        max_rounds = rounds or self.podcast_config.get('default_rounds', 3)
        output_format = "text" if no_audio else self.podcast_config.get('default_output_format', 'both')

        self.current_session = PodcastSession(
            topic=topic,
            session_id=session_id,
            max_rounds=max_rounds,
            output_format=output_format,
            output_directory=output_dir
        )

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        self._setup_participants()

        # –û–±–æ–≥–∞—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        enriched_context = self._enrich_context(topic)
        self.current_session.enriched_context = enriched_context.to_dict()

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
        self._distribute_context(enriched_context)

        # –°–æ–∑–¥–∞–µ–º LLM —Å–µ—Å—Å–∏–∏ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        self._create_llm_sessions()

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        self._setup_output_directory()

        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
        self.current_session.is_active = True
        self.current_session.log_event("session_start", f"–ü–æ–¥–∫–∞—Å—Ç –∑–∞–ø—É—â–µ–Ω: {topic}")

        print(f"‚úÖ –°–µ—Å—Å–∏—è {session_id} –≥–æ—Ç–æ–≤–∞ –∫ –Ω–∞—á–∞–ª—É")
        return self.current_session

    def run_podcast(self) -> bool:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ–¥–∫–∞—Å—Ç–∞

        Returns:
            True –µ—Å–ª–∏ –ø–æ–¥–∫–∞—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ
        """
        if not self.current_session or not self.current_session.is_active:
            print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –ø–æ–¥–∫–∞—Å—Ç–∞")
            return False

        try:
            # –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–∞—Å—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
            self._opening_segment()

            # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞—É–Ω–¥—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è
            for round_num in range(1, self.current_session.max_rounds + 1):
                if not self.current_session.start_new_round():
                    break

                print(f"\nüîÑ –†–∞—É–Ω–¥ {round_num}/{self.current_session.max_rounds}")
                success = self._run_discussion_round()

                if not success:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ä–∞—É–Ω–¥–µ {round_num}")
                    break

            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Å—Ç–∞
            self._closing_segment()

            # –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
            self.current_session.complete_session()
            print(f"üéâ –ü–æ–¥–∫–∞—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {self.current_session.session_id}")

            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–¥–∫–∞—Å—Ç–∞: {e}")
            self.current_session.log_event("error", f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False

    def _setup_participants(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–¥–∫–∞—Å—Ç–∞"""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if 'participants' in self.podcast_config:
            self.participant_manager.create_from_config(self.podcast_config)
        else:
            self.participant_manager.load_default_participants()

        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Å–µ—Å—Å–∏–∏
        for participant_id in self.participant_manager.participants.keys():
            self.current_session.participants.append(participant_id)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π (–º–æ–¥–µ—Ä–∞—Ç–æ—Ä –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤—ã–π)
        speaking_order = self.participant_manager.get_speaking_order()
        self.current_session.speaking_queue = speaking_order.copy()
        self.current_session.current_speaker = speaking_order[0] if speaking_order else None

        print(f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join([p.name for p in self.participant_manager.participants.values()])}")

    def _enrich_context(self, topic: str) -> EnrichedContext:
        """–û–±–æ–≥–∞—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–º—ã"""
        print("üîç –û–±–æ–≥–∞—â–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞...")
        enriched_context = self.context_enricher.enrich_context(topic)
        print(f"üìö –ù–∞–π–¥–µ–Ω–æ {len(enriched_context.facts)} —Ñ–∞–∫—Ç–æ–≤ –∏–∑ {len(enriched_context.search_results)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
        return enriched_context

    def _distribute_context(self, enriched_context: EnrichedContext):
        """–†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏"""
        participants = self.participant_manager.participants
        self.participant_contexts = self.context_splitter.split_context_for_participants(
            enriched_context, participants
        )
        print("üìã –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏")

    def _create_llm_sessions(self):
        """–°–æ–∑–¥–∞–µ—Ç LLM —Å–µ—Å—Å–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        for participant_id, profile in self.participant_manager.participants.items():
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            participant_context = self.participant_contexts.get(participant_id, {})

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            full_prompt = profile.get_full_system_prompt(
                self.current_session.topic,
                self.current_session.enriched_context
            )

            # –°–æ–∑–¥–∞–µ–º LLM —Å–µ—Å—Å–∏—é
            llm_session = self.llm_engine.create_session(
                system_prompt=full_prompt,
                temperature=profile.temperature
            )

            if llm_session:
                self.llm_sessions[participant_id] = llm_session
                self.current_session.llm_sessions[participant_id] = llm_session
                print(f"ü§ñ LLM —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è {profile.name}")
            else:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å LLM —Å–µ—Å—Å–∏—é –¥–ª—è {profile.name}")

    def _setup_output_directory(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if not self.current_session.output_directory:
            output_base = "output"
            self.current_session.output_directory = os.path.join(
                output_base, self.current_session.session_id
            )

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        Path(self.current_session.output_directory).mkdir(parents=True, exist_ok=True)
        print(f"üìÅ –í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.current_session.output_directory}")

    def _opening_segment(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–∞—Å—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º"""
        moderator = self.participant_manager.get_moderator()
        if not moderator:
            raise Exception("–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")

        print("\nüé¨ –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–∞—Å—Ç–∞...")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        participants_list = ", ".join([
            p.name for p in self.participant_manager.get_speakers()
        ])

        opening_prompt = f"""–û—Ç–∫—Ä–æ–π –ø–æ–¥–∫–∞—Å—Ç –Ω–∞ —Ç–µ–º—É "{self.current_session.topic}".

–ü—Ä–µ–¥—Å—Ç–∞–≤—å:
1. –°–µ–±—è –∫–∞–∫ –≤–µ–¥—É—â–µ–≥–æ
2. –¢–µ–º—É –ø–æ–¥–∫–∞—Å—Ç–∞
3. –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_list}
4. –ö—Ä–∞—Ç–∫–∏–π –∞–Ω–æ–Ω—Å —Ç–æ–≥–æ, —á—Ç–æ –±—É–¥–µ—Ç –æ–±—Å—É–∂–¥–∞—Ç—å—Å—è

–°–¥–µ–ª–∞–π —ç—Ç–æ –∂–∏–≤–æ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —Å–æ–∑–¥–∞–π –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –±–µ—Å–µ–¥—ã."""

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        response = self._get_participant_response(moderator.participant_id, opening_prompt)

        if response:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
            self.current_session.add_transcript_entry(
                moderator.participant_id,
                moderator.name,
                moderator.role,
                response
            )

            # –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º —Ä–µ—á—å
            self._synthesize_speech(moderator, response, "opening")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç–∏–µ –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")

    def _run_discussion_round(self) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω —Ä–∞—É–Ω–¥ –æ–±—Å—É–∂–¥–µ–Ω–∏—è"""
        moderator = self.participant_manager.get_moderator()
        speakers = self.participant_manager.get_speakers()

        if not moderator or not speakers:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏")
            return False

        # –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –¥–µ–ª–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–∏–µ –≤ —Ä–∞—É–Ω–¥ —Å –Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
        round_intro = self._moderator_round_intro()
        if not round_intro:
            print("‚ö†Ô∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–µ —Å–º–æ–≥ —Å–¥–µ–ª–∞—Ç—å –≤–≤–µ–¥–µ–Ω–∏–µ –≤ —Ä–∞—É–Ω–¥")
            return False

        # –ö–∞–∂–¥—ã–π —Å–ø–∏–∫–µ—Ä –≤—ã—Å–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ —Ç–µ–º–µ —Ä–∞—É–Ω–¥–∞
        for speaker in speakers:
            speaker_response = self._speaker_response(speaker)

            if not speaker_response:
                print(f"‚ö†Ô∏è –°–ø–∏–∫–µ—Ä {speaker.name} –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª")
                continue

        return True

    def _moderator_round_intro(self) -> Optional[str]:
        """–í–≤–µ–¥–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –≤ —Ä–∞—É–Ω–¥ —Å –Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏"""
        moderator = self.participant_manager.get_moderator()
        if not moderator:
            return None

        round_num = self.current_session.current_round
        speakers = self.participant_manager.get_speakers()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        speakers_info = []
        for speaker in speakers:
            speaker_info = f"{speaker.name} ({', '.join(speaker.expertise_areas[:2])})"
            speakers_info.append(speaker_info)

        speakers_list = ", ".join(speakers_info)

        intro_prompt = f"""–≠—Ç–æ —Ä–∞—É–Ω–¥ {round_num} –∏–∑ {self.current_session.max_rounds} –ø–æ —Ç–µ–º–µ "{self.current_session.topic}".

–°–¥–µ–ª–∞–π –≤–≤–µ–¥–µ–Ω–∏–µ –≤ —Ä–∞—É–Ω–¥, –∫–æ—Ç–æ—Ä–æ–µ –≤–∫–ª—é—á–∞–µ—Ç:
1. –ö—Ä–∞—Ç–∫–æ–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ —Ñ–æ–∫—É—Å–∞ —ç—Ç–æ–≥–æ —Ä–∞—É–Ω–¥–∞
2. –û–±—â–∏–µ –Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Ç–µ–º—ã –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º

–£—á–∞—Å—Ç–Ω–∏–∫–∏: {speakers_list}

–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —ç—Ç–æ –∫–∞–∫ –µ–¥–∏–Ω–æ–µ —Å–≤—è–∑–Ω–æ–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–º–æ–≥—É—Ç –≤—ã—Å–∫–∞–∑–∞—Ç—å—Å—è –ø–æ –ø–æ—Ä—è–¥–∫—É."""

        response = self._get_participant_response(moderator.participant_id, intro_prompt)

        if response:
            self.current_session.add_transcript_entry(
                moderator.participant_id,
                moderator.name,
                moderator.role,
                response
            )
            self._synthesize_speech(moderator, response, f"round_{round_num}_intro")

        return response


    def _speaker_response(self, speaker: ParticipantProfile) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç —Å–ø–∏–∫–µ—Ä–∞ –Ω–∞ –≤–≤–µ–¥–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"""
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–≤–µ–¥–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ
        last_moderator_intro = None
        for entry in reversed(self.current_session.transcript):
            if entry.role == ParticipantRole.MODERATOR:
                last_moderator_intro = entry
                break

        if last_moderator_intro:
            response_prompt = f"""–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —Å–¥–µ–ª–∞–ª –≤–≤–µ–¥–µ–Ω–∏–µ –≤ —Ä–∞—É–Ω–¥: "{last_moderator_intro.text}"

–í—ã—Å–∫–∞–∂–∏ —Å–≤–æ–µ –º–Ω–µ–Ω–∏–µ –ø–æ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –∏ —Ç–µ–º–∞–º, –∏—Å—Ö–æ–¥—è –∏–∑ —Å–≤–æ–µ–π —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã –∏ —Ä–æ–ª–∏ –≤ –ø–æ–¥–∫–∞—Å—Ç–µ.
–û—Ç–≤–µ—á–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫ –¥–∏—Å–∫—É—Å—Å–∏–∏."""
        else:
            response_prompt = f"""–í—ã—Å–∫–∞–∂–∏ —Å–≤–æ–µ –º–Ω–µ–Ω–∏–µ –ø–æ —Ç–µ–º–µ "{self.current_session.topic}" –∏—Å—Ö–æ–¥—è –∏–∑ —Å–≤–æ–µ–π —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã.
–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞ –∞—Å–ø–µ–∫—Ç–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç–≤–æ–µ–π –æ–±–ª–∞—Å—Ç–∏ –∑–Ω–∞–Ω–∏–π."""

        response = self._get_participant_response(speaker.participant_id, response_prompt)

        if response:
            self.current_session.add_transcript_entry(
                speaker.participant_id,
                speaker.name,
                speaker.role,
                response
            )
            self._synthesize_speech(speaker, response, f"response_{self.current_session.current_round}")

        return response


    def _closing_segment(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Å—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º"""
        moderator = self.participant_manager.get_moderator()
        if not moderator:
            print("‚ùå –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
            return

        print("\nüé¨ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Å—Ç–∞...")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Ä–µ–∑—é–º–µ
        transcript_summary = self._get_transcript_summary()

        closing_prompt = f"""–ó–∞–≤–µ—Ä—à–∏ –ø–æ–¥–∫–∞—Å—Ç –Ω–∞ —Ç–µ–º—É "{self.current_session.topic}".

–û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è:
{transcript_summary}

–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –∫–ª—é—á–µ–≤—ã—Ö –∏–¥–µ–π –∏ –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."""

        response = self._get_participant_response(moderator.participant_id, closing_prompt)

        if response:
            self.current_session.add_transcript_entry(
                moderator.participant_id,
                moderator.name,
                moderator.role,
                response
            )
            self._synthesize_speech(moderator, response, "closing")

    def _get_participant_response(self, participant_id: str, prompt: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ LLM"""
        llm_session = self.llm_sessions.get(participant_id)
        if not llm_session:
            print(f"‚ùå LLM —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è {participant_id}")
            return None

        profile = self.participant_manager.get_participant(participant_id)
        if profile:
            print(f"üéôÔ∏è {profile.name} –æ—Ç–≤–µ—á–∞–µ—Ç...")

        try:
            response = llm_session.send_message(prompt)

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è thinking-–±–ª–æ–∫–æ–≤ –Ω–∞ —É—Ä–æ–≤–Ω–µ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            # (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–æ—à–ª–∏ —á–µ—Ä–µ–∑ LLM —Å–µ—Å—Å–∏—é)
            if response:
                response = filter_thinking_blocks(response)

            return response
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç {participant_id}: {e}")
            return None

    def _synthesize_speech(self, profile: ParticipantProfile, text: str, segment_name: str):
        """–°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ—Ç —Ä–µ—á—å –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        if self.current_session.output_format == "text":
            print(f"üìù {profile.name}: {text}")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ
        audio_filename = f"{profile.participant_id}_{segment_name}_{int(time.time())}.wav"
        audio_path = os.path.join(self.current_session.output_directory, audio_filename)

        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–∫—Ü–µ–Ω—Ç–∏–∑–∞—Ç–æ—Ä–∞
        accentizer_info = " [—Å —É–¥–∞—Ä–µ–Ω–∏—è–º–∏]" if self.tts_engine.use_accentizer and self.tts_engine.accentizer else ""
        print(f"üéôÔ∏è {profile.name} ({profile.voice_settings.speaker_name}){accentizer_info}: {text[:50]}{'...' if len(text) > 50 else ''}")

        try:
            if self.current_session.output_format == "audio":
                # –¢–æ–ª—å–∫–æ —Å–∏–Ω—Ç–µ–∑ –±–µ–∑ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                result = self.tts_engine.synthesize_only(
                    text,
                    voice_override=profile.voice_settings.speaker_name,
                    save_path=audio_path
                )
            else:
                # –°–∏–Ω—Ç–µ–∑ —Å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º
                result = self.tts_engine.synthesize_and_play(
                    text,
                    voice_override=profile.voice_settings.speaker_name,
                    save_path=audio_path
                )

            if result:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ —Å –ø—É—Ç–µ–º –∫ –∞—É–¥–∏–æ
                if self.current_session.transcript:
                    self.current_session.transcript[-1].audio_file = audio_filename

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏ –¥–ª—è {profile.name}: {e}")

    def _get_transcript_summary(self) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        speakers_points = {}

        for entry in self.current_session.transcript:
            if entry.role == ParticipantRole.SPEAKER:
                if entry.participant_name not in speakers_points:
                    speakers_points[entry.participant_name] = []

                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞ –∫–∞–∫ –∫–ª—é—á–µ–≤—É—é –∏–¥–µ—é
                key_point = entry.text[:100] + "..." if len(entry.text) > 100 else entry.text
                speakers_points[entry.participant_name].append(key_point)

        summary_parts = []
        for speaker, points in speakers_points.items():
            summary_parts.append(f"{speaker}: {points[0] if points else '—É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏'}")

        return "\n".join(summary_parts)

    def save_results(self) -> Dict[str, str]:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–¥–∫–∞—Å—Ç–∞ –≤ —Ñ–∞–π–ª—ã"""
        if not self.current_session:
            return {}

        output_dir = self.current_session.output_directory
        results = {}

        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≤ JSON
            transcript_json_path = os.path.join(output_dir, "transcript.json")
            import json
            with open(transcript_json_path, 'w', encoding='utf-8') as f:
                json.dump(self.current_session.to_dict(), f, ensure_ascii=False, indent=2)
            results['transcript_json'] = transcript_json_path

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≤ Markdown
            transcript_md_path = os.path.join(output_dir, "transcript.md")
            with open(transcript_md_path, 'w', encoding='utf-8') as f:
                f.write(f"# –ü–æ–¥–∫–∞—Å—Ç: {self.current_session.topic}\n\n")
                f.write(f"**–î–∞—Ç–∞:** {self.current_session.created_at.strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(f"**–†–∞—É–Ω–¥–æ–≤:** {self.current_session.current_round}\n")
                f.write(f"**–£—á–∞—Å—Ç–Ω–∏–∫–∏:** {', '.join([p.name for p in self.participant_manager.participants.values()])}\n\n")

                f.write("## –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç\n\n")
                for entry in self.current_session.transcript:
                    timestamp = entry.timestamp.strftime('%H:%M:%S')
                    f.write(f"**[{timestamp}] {entry.participant_name}:** {entry.text}\n\n")

            results['transcript_md'] = transcript_md_path

            print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_dir}")
            return results

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
            return {}