#!/usr/bin/env python3
"""
Speech Assistant API

–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:
1. Vosk - –¥–µ—Ç–µ–∫—Ü–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (wake word detection)
2. FasterWhisper - —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –±–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–∞—É–∑
3. Silero TTS - —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏

–ü—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç—ã:
1. –û–∂–∏–¥–∞–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–π —Ñ—Ä–∞–∑—ã (vosk)
2. –ó–∞–ø–∏—Å—å —Ä–µ—á–∏ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è (faster-whisper)
3. –°–∏–Ω—Ç–µ–∑ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (silero)
4. –í–æ–∑–≤—Ä–∞—Ç –∫ –æ–∂–∏–¥–∞–Ω–∏—é –∫–ª—é—á–µ–≤–æ–π —Ñ—Ä–∞–∑—ã

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python main.py
"""

import sys
import threading
import time

import numpy as np
import sounddevice as sd

from core.pause_detection import PauseDetector
from core.speech_recognition import SpeechRecognizer
from core.text_to_speech import TextToSpeech
from core.wake_word import WakeWordDetector
from utils.config import load_config
from utils.config_keys import ConfigKeys
from utils.enums import AssistantState


class SpeechAssistant:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∏–π –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"""

    def __init__(self, config_file='config.json', debug=False):
        self.config = load_config(config_file)
        if not self.config:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")

        self.debug = debug

        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.wake_detector = WakeWordDetector(self.config, debug=debug)
        self.speech_recognizer = SpeechRecognizer(self.config)
        self.tts = TextToSpeech(self.config)
        self.pause_detector = PauseDetector(self.config, debug=debug)

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.state = AssistantState.LISTENING
        self.should_stop = threading.Event()

        # –ê—É–¥–∏–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.sample_rate = self.config[ConfigKeys.WAKE_WORD][ConfigKeys.WakeWord.SAMPLE_RATE]
        self.chunk_size = self.config[ConfigKeys.WAKE_WORD][ConfigKeys.WakeWord.CHUNK_SIZE]

        # –ë—É—Ñ–µ—Ä—ã –¥–ª—è –∑–∞–ø–∏—Å–∏
        self.recording_buffer = []
        self.recording_lock = threading.Lock()
        self.max_recording_duration = self.config[ConfigKeys.ASSISTANT][ConfigKeys.TTS.MAX_RECORDING_DURATION]
        self.recording_start_time = None
        self.recording_timer = None
        self.stop_reason = None  # –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏

    def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞...")

        if not self.wake_detector.initialize():
            return False

        if not self.speech_recognizer.initialize():
            return False

        if not self.tts.initialize():
            return False

        print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        return True

    def audio_callback(self, indata, frames, time_info, status):
        """–ö–æ–ª–±—ç–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞"""
        if status:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞: {status}")
            return

        # DEBUG: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–±—ç–∫ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è
        if self.debug and hasattr(self, '_callback_count'):
            self._callback_count += 1
            if self._callback_count % 100 == 0:  # –∫–∞–∂–¥—ã–µ 100 –≤—ã–∑–æ–≤–æ–≤
                print(f"üîç DEBUG: audio_callback –≤—ã–∑–≤–∞–Ω {self._callback_count} —Ä–∞–∑")
        elif self.debug:
            self._callback_count = 1
            print("üîç DEBUG: audio_callback –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É")

        audio_chunk = indata[:, 0]  # –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª

        with self.recording_lock:
            if self.state == AssistantState.LISTENING:
                # –ò—â–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
                wake_detected, result = self.wake_detector.detect_wake_word(audio_chunk)

                if wake_detected:
                    text, detection_time, pre_trigger_audio = result
                    print(f"üéâ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {text} (–≤—Ä–µ–º—è: {detection_time:.3f}s)")
                    self._start_recording(pre_trigger_audio)
                elif self.debug and result:  # –µ—Å–ª–∏ –µ—Å—Ç—å –ª—é–±–æ–π —Ç–µ–∫—Å—Ç
                    print(f"üîç DEBUG: Vosk –≤–µ—Ä–Ω—É–ª —Ç–µ–∫—Å—Ç: '{result}', wake_detected={wake_detected}")

            elif self.state == AssistantState.RECORDING:
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞—É–¥–∏–æ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
                self.recording_buffer.extend(audio_chunk)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏
                if self.recording_start_time:
                    duration = time.time() - self.recording_start_time

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é –ø–∞—É–∑
                    if self.pause_detector.should_stop_recording(audio_chunk, duration):
                        self.stop_reason = "pause"
                        if self.debug:
                            print(f"ü§´ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –ø–∞—É–∑–µ (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.1f}s)")
                        self._stop_recording_and_process()
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏
                    elif duration >= self.max_recording_duration:
                        self.stop_reason = "timeout"
                        print(f"‚è∞ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø–∏—Å–∏ ({self.max_recording_duration}—Å)")
                        self._stop_recording_and_process()

    def _start_recording(self, pre_trigger_audio=None):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"""
        self.state = AssistantState.RECORDING

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä –ø–∞—É–∑
        self.pause_detector.reset()
        self.stop_reason = None

        # –ï—Å–ª–∏ –µ—Å—Ç—å pre-trigger –∞—É–¥–∏–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –Ω–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏
        if pre_trigger_audio is not None and len(pre_trigger_audio) > 0:
            self.recording_buffer = list(pre_trigger_audio)
            print(f"üî¥ –ù–∞—á–∏–Ω–∞—é –∑–∞–ø–∏—Å—å —Å pre-trigger ({len(pre_trigger_audio)} —Å—ç–º–ø–ª–æ–≤)...")
        else:
            self.recording_buffer = []
            print("üî¥ –ù–∞—á–∏–Ω–∞—é –∑–∞–ø–∏—Å—å...")

        self.recording_start_time = time.time()

        # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
        if self.recording_timer:
            self.recording_timer.cancel()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏ (–∫–∞–∫ fallback)
        self.recording_timer = threading.Timer(
            self.max_recording_duration,
            lambda: self._stop_recording_and_process("timeout")
        )
        self.recording_timer.start()

    def _stop_recording_and_process(self, reason=None):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–ø–∏—Å—å –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É"""
        if self.state != AssistantState.RECORDING:
            return

        # –ï—Å–ª–∏ –ø—Ä–∏—á–∏–Ω–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é
        if reason is None:
            reason = self.stop_reason or "unknown"

        self.state = AssistantState.TRANSCRIBING
        duration = time.time() - self.recording_start_time if self.recording_start_time else 0

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        if reason == "pause":
            print(f"‚èπÔ∏è –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ –ø–∞—É–∑–µ ({duration:.1f}—Å)")
        elif reason == "timeout":
            print(f"‚èπÔ∏è –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É ({duration:.1f}—Å)")
        else:
            print(f"‚èπÔ∏è –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ({duration:.1f}—Å)")

        # –ö–æ–ø–∏—Ä—É–µ–º –±—É—Ñ–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        audio_data = np.array(self.recording_buffer.copy(), dtype=np.float32)
        processing_thread = threading.Thread(
            target=self._process_recording,
            args=(audio_data,),
            daemon=True
        )
        processing_thread.start()

    def _process_recording(self, audio_data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ (—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ + —Å–∏–Ω—Ç–µ–∑)"""
        try:
            if len(audio_data) == 0:
                print("‚ö†Ô∏è –ü—É—Å—Ç–∞—è –∑–∞–ø–∏—Å—å")
                self._reset_to_listening()
                return

            # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
            print("üìù –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å...")
            text = self.speech_recognizer.transcribe_audio(audio_data, self.sample_rate)

            if not text.strip():
                print("‚ùå –¢–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω")
                self._reset_to_listening()
                return

            # –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º
            self.state = AssistantState.SYNTHESIZING
            success = self.tts.synthesize_and_play(text)

            if success:
                print("‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏: {e}")
        finally:
            self._reset_to_listening()

    def _reset_to_listening(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—é –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
        with self.recording_lock:
            # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω
            if self.recording_timer:
                self.recording_timer.cancel()
                self.recording_timer = None

            self.state = AssistantState.LISTENING
            self.recording_buffer = []
            self.recording_start_time = None
        print("üëÇ –ñ–¥—É –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ...")

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
        print("ü§ñ –ó–∞–ø—É—Å–∫ —Ä–µ—á–µ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")
        print(f"   –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {self.wake_detector.keywords}")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å: {self.max_recording_duration}—Å")
        print("   –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        print()

        self._reset_to_listening()

        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫
            with sd.InputStream(
                callback=self.audio_callback,
                channels=1,
                samplerate=self.sample_rate,
                blocksize=self.chunk_size,
                dtype='float32'
            ):
                while not self.should_stop.is_set():
                    time.sleep(0.1)

        except KeyboardInterrupt:
            print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞...")
            self.should_stop.set()
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            self.should_stop.set()

        print("‚úÖ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    debug = "--debug" in sys.argv or "-d" in sys.argv

    if "--help" in sys.argv or "-h" in sys.argv:
        print("Speech Assistant - –†–µ—á–µ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç")
        print()
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python main.py [--debug] [--help]")
        print()
        print("–û–ø—Ü–∏–∏:")
        print("  --debug, -d    –í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥")
        print("  --help, -h     –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É")
        return 0

    try:
        assistant = SpeechAssistant(debug=debug)

        if debug:
            print("üîß –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤–∫–ª—é—á–µ–Ω")

        if not assistant.initialize():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")
            return 1

        assistant.run()
        return 0

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        if debug:
            import traceback
            traceback.print_exc()
        return 1


if __name__ == "__main__":
    exit(main())