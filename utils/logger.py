"""
Unified logging module for the Speech Assistant application.
Provides centralized logging configuration and emoji-enhanced formatters.
"""

import logging
import sys
from typing import Optional


class EmojiFormatter(logging.Formatter):
    """Custom formatter that adds emojis to log messages based on level"""

    EMOJI_MAP = {
        'DEBUG': 'üîç',
        'INFO': '‚ÑπÔ∏è',
        'WARNING': '‚ö†Ô∏è',
        'ERROR': '‚ùå',
        'CRITICAL': 'üí•'
    }

    def format(self, record):
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        emoji = self.EMOJI_MAP.get(record.levelname, 'üìù')
        original_msg = super().format(record)
        return f"{emoji} {original_msg}"


class AssistantLogger:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è Speech Assistant"""

    def __init__(self, name: str = 'assistant', level: str = 'INFO', use_emoji: bool = True):
        self.logger = logging.getLogger(name)
        self.use_emoji = use_emoji

        # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
        if not self.logger.handlers:
            self._setup_logger(level)

    def _setup_logger(self, level: str):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–≥–µ—Ä —Å –∫–æ–Ω—Å–æ–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º"""
        self.logger.setLevel(getattr(logging, level.upper(), logging.INFO))

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
        console_handler = logging.StreamHandler(sys.stdout)
        console_handler.setLevel(self.logger.level)

        # –í—ã–±–∏—Ä–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
        if self.use_emoji:
            formatter = EmojiFormatter('%(message)s')
        else:
            formatter = logging.Formatter('%(levelname)s - %(name)s - %(message)s')

        console_handler.setFormatter(formatter)
        self.logger.addHandler(console_handler)

    def debug(self, message: str):
        """–û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        self.logger.debug(message)

    def info(self, message: str):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        self.logger.info(message)

    def warning(self, message: str):
        """–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
        self.logger.warning(message)

    def error(self, message: str):
        """–û—à–∏–±–∫–∞"""
        self.logger.error(message)

    def critical(self, message: str):
        """–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞"""
        self.logger.critical(message)


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
_global_logger: Optional[AssistantLogger] = None


def get_logger(name: str = 'assistant', level: str = 'INFO', use_emoji: bool = True) -> AssistantLogger:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏

    Args:
        name: –ò–º—è –ª–æ–≥–≥–µ—Ä–∞
        level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (DEBUG, INFO, WARNING, ERROR, CRITICAL)
        use_emoji: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö

    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä AssistantLogger
    """
    global _global_logger

    if _global_logger is None:
        _global_logger = AssistantLogger(name, level, use_emoji)

    return _global_logger


def setup_logging_from_config(config: dict) -> AssistantLogger:
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

    Args:
        config: –°–ª–æ–≤–∞—Ä—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

    Returns:
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä
    """
    interface_config = config.get('interface', {})

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    use_emoji = interface_config.get('use_emoji', True)
    verbose = interface_config.get('verbose', True)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    level = 'DEBUG' if verbose else 'INFO'

    return get_logger('assistant', level, use_emoji)


# Convenience —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def log_debug(message: str):
    """–ë—ã—Å—Ç—Ä–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    get_logger().debug(message)


def log_info(message: str):
    """–ë—ã—Å—Ç—Ä–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    get_logger().info(message)


def log_warning(message: str):
    """–ë—ã—Å—Ç—Ä–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
    get_logger().warning(message)


def log_error(message: str):
    """–ë—ã—Å—Ç—Ä–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏"""
    get_logger().error(message)


def log_critical(message: str):
    """–ë—ã—Å—Ç—Ä–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏"""
    get_logger().critical(message)