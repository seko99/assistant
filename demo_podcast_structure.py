#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–∞—Å—Ç–∞ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def show_project_structure():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ–¥–∫–∞—Å—Ç–æ–≤"""
    print("üéôÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–∞—Å—Ç–∞:")
    print("=" * 50)

    base_path = Path(__file__).parent

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    components = [
        ("virtual_podcast.py", "–ì–ª–∞–≤–Ω—ã–π CLI —Å–∫—Ä–∏–ø—Ç"),
        ("config.json", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å —Å–µ–∫—Ü–∏–µ–π podcast)"),
        ("podcast/__init__.py", "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –ø–æ–¥–∫–∞—Å—Ç–æ–≤"),
        ("podcast/session.py", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–µ–π –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–º"),
        ("podcast/persona.py", "–ü—Ä–æ—Ñ–∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –≥–æ–ª–æ—Å–∞"),
        ("podcast/context_enricher.py", "–û–±–æ–≥–∞—â–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ç–µ–º—ã"),
        ("podcast/context_splitter.py", "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"),
        ("podcast/orchestrator.py", "–û—Å–Ω–æ–≤–Ω–æ–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥–∫–∞—Å—Ç–∞"),
        ("tests/test_podcast_session.py", "–¢–µ—Å—Ç—ã —Å–µ—Å—Å–∏–∏"),
        ("tests/test_context_enricher.py", "–¢–µ—Å—Ç—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"),
        ("tests/test_persona.py", "–¢–µ—Å—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"),
        ("tests/run_tests.py", "–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"),
        ("VIRTUAL_PODCAST_README.md", "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
    ]

    for file_path, description in components:
        full_path = base_path / file_path
        status = "‚úÖ" if full_path.exists() else "‚ùå"
        print(f"{status} {file_path:<35} - {description}")

    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    podcast_files = list((base_path / "podcast").glob("*.py"))
    test_files = list((base_path / "tests").glob("test_*.py"))

    print(f"  ‚Ä¢ –ú–æ–¥—É–ª–µ–π –ø–æ–¥–∫–∞—Å—Ç–∞: {len(podcast_files)}")
    print(f"  ‚Ä¢ –¢–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(test_files)}")
    print(f"  ‚Ä¢ –°—Ç—Ä–æ–∫ –∫–æ–¥–∞ –≤ podcast/: {count_lines_in_dir(base_path / 'podcast')}")


def count_lines_in_dir(directory):
    """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ –∫–æ–¥–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    total_lines = 0
    if directory.exists():
        for py_file in directory.glob("*.py"):
            try:
                with open(py_file, 'r', encoding='utf-8') as f:
                    total_lines += len(f.readlines())
            except:
                pass
    return total_lines


def show_participants():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–¥–∫–∞—Å—Ç–∞"""
    print("\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–¥–∫–∞—Å—Ç–∞:")
    print("=" * 50)

    participants = [
        {
            "name": "–ú–∞–∫—Å–∏–º",
            "role": "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä",
            "voice": "aidar",
            "description": "–û–ø—ã—Ç–Ω—ã–π –∂—É—Ä–Ω–∞–ª–∏—Å—Ç, —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ö–æ–¥–æ–º –±–µ—Å–µ–¥—ã",
            "expertise": ["–∂—É—Ä–Ω–∞–ª–∏—Å—Ç–∏–∫–∞", "–º–µ–¥–∏–∞", "–∏–Ω—Ç–µ—Ä–≤—å—é"]
        },
        {
            "name": "–ê–Ω–Ω–∞",
            "role": "–¢–µ—Ö—ç–∫—Å–ø–µ—Ä—Ç",
            "voice": "kseniya",
            "description": "IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å –æ–ø—ã—Ç–æ–º –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
            "expertise": ["–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ò–ò", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"]
        },
        {
            "name": "–î–º–∏—Ç—Ä–∏–π",
            "role": "–ë–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫",
            "voice": "eugene",
            "description": "–≠–∫—Å–ø–µ—Ä—Ç –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ —Ä—ã–Ω–æ—á–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É",
            "expertise": ["–±–∏–∑–Ω–µ—Å", "—ç–∫–æ–Ω–æ–º–∏–∫–∞", "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"]
        },
        {
            "name": "–ï–ª–µ–Ω–∞",
            "role": "–°–æ—Ü–∏–æ–ª–æ–≥",
            "voice": "baya",
            "description": "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–∞–º",
            "expertise": ["—Å–æ—Ü–∏–æ–ª–æ–≥–∏—è", "–∫—É–ª—å—Ç—É—Ä–∞", "–æ–±—â–µ—Å—Ç–≤–æ"]
        }
    ]

    for p in participants:
        print(f"üé§ {p['name']} ({p['role']})")
        print(f"   –ì–æ–ª–æ—Å: {p['voice']}")
        print(f"   {p['description']}")
        print(f"   –≠–∫—Å–ø–µ—Ä—Ç–∏–∑–∞: {', '.join(p['expertise'])}")
        print()


def show_usage_examples():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    print("üí° –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
    print("=" * 50)

    examples = [
        ("–ë–∞–∑–æ–≤—ã–π –ø–æ–¥–∫–∞—Å—Ç", 'python virtual_podcast.py --topic "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"'),
        ("–ö–æ—Ä–æ—Ç–∫–∏–π –ø–æ–¥–∫–∞—Å—Ç", 'python virtual_podcast.py --topic "–ë–ª–æ–∫—á–µ–π–Ω" --rounds 2'),
        ("–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç", 'python virtual_podcast.py --topic "–ö–ª–∏–º–∞—Ç" --no-audio'),
        ("–ö–∞—Å—Ç–æ–º–Ω–∞—è –ø–∞–ø–∫–∞", 'python virtual_podcast.py --topic "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ" -o ./my_podcasts'),
        ("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º", 'python virtual_podcast.py'),
        ("–°–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤", 'python virtual_podcast.py --list-voices'),
        ("–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫", 'python virtual_podcast.py --dry-run'),
    ]

    for description, command in examples:
        print(f"‚Ä¢ {description}:")
        print(f"  {command}")
        print()


def show_features():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
    print("üöÄ –ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
    print("=" * 50)

    features = [
        "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–∫–∞—Å—Ç–æ–≤ –ø–æ —Ç–µ–º–µ",
        "‚úÖ 4 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ò–ò-—É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏",
        "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤ Silero TTS",
        "‚úÖ –û–±–æ–≥–∞—â–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ mock –ø–æ–∏—Å–∫",
        "‚úÖ –ì–∏–±–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
        "‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON –∏ Markdown —Ñ–æ—Ä–º–∞—Ç–∞—Ö",
        "‚úÖ CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –æ–ø—Ü–∏–π",
        "‚úÖ –†–µ–∂–∏–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–∞ (--no-audio)",
        "‚úÖ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤",
        "‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏",
        "‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        "‚úÖ –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"
    ]

    for feature in features:
        print(f"  {feature}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üéôÔ∏è –í–ò–†–¢–£–ê–õ–¨–ù–´–ô –ü–û–î–ö–ê–°–¢ - –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–¢–†–£–ö–¢–£–†–´")
    print("=" * 60)
    print()

    show_project_structure()
    show_participants()
    show_features()
    show_usage_examples()

    print("üìù –î–ª—è –ø–æ–ª–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å–º. VIRTUAL_PODCAST_README.md")
    print("üß™ –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤: python tests/run_tests.py")
    print("‚öôÔ∏è –î–ª—è —Ä–∞–±–æ—Ç—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π LLM —Å–µ—Ä–≤–µ—Ä –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")


if __name__ == "__main__":
    main()