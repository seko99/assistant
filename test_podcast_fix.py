#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–ø–ª–∏–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
from podcast.orchestrator import PodcastOrchestrator
from podcast.session import PodcastSession


def test_orchestrator_structure():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã PodcastOrchestrator...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥—ã —É–¥–∞–ª–µ–Ω—ã
    orchestrator_methods = dir(PodcastOrchestrator)

    removed_methods = [
        '_moderator_question_for_speaker',
        '_moderator_transition'
    ]

    for method in removed_methods:
        if method in orchestrator_methods:
            print(f"‚ùå –ú–µ—Ç–æ–¥ {method} –ù–ï —É–¥–∞–ª–µ–Ω!")
            return False
        else:
            print(f"‚úÖ –ú–µ—Ç–æ–¥ {method} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω—É–∂–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞–ª–∏—Å—å
    required_methods = [
        '_run_discussion_round',
        '_moderator_round_intro',
        '_speaker_response'
    ]

    for method in required_methods:
        if method in orchestrator_methods:
            print(f"‚úÖ –ú–µ—Ç–æ–¥ {method} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print(f"‚ùå –ú–µ—Ç–æ–¥ {method} –û–¢–°–£–¢–°–¢–í–£–ï–¢!")
            return False

    return True


def test_round_flow_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É —Ä–∞—É–Ω–¥–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ —Ä–∞—É–Ω–¥–æ–≤...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ _run_discussion_round
    import inspect
    source = inspect.getsource(PodcastOrchestrator._run_discussion_round)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–¥–∞–ª–µ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
    forbidden_calls = [
        '_moderator_question_for_speaker',
        '_moderator_transition'
    ]

    for call in forbidden_calls:
        if call in source:
            print(f"‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤—ã–∑–æ–≤ {call} –≤ _run_discussion_round!")
            return False
        else:
            print(f"‚úÖ –í—ã–∑–æ–≤ {call} —É–¥–∞–ª–µ–Ω –∏–∑ _run_discussion_round")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
    required_calls = [
        '_moderator_round_intro',
        '_speaker_response'
    ]

    for call in required_calls:
        if call in source:
            print(f"‚úÖ –í—ã–∑–æ–≤ {call} –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ _run_discussion_round")
        else:
            print(f"‚ùå –í—ã–∑–æ–≤ {call} –û–¢–°–£–¢–°–¢–í–£–ï–¢ –≤ _run_discussion_round!")
            return False

    return True


def test_intro_enhancement():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏—è –≤–≤–µ–¥–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞...")

    import inspect
    source = inspect.getsource(PodcastOrchestrator._moderator_round_intro)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –ø—Ä–æ–º–ø—Ç–µ
    required_elements = [
        '–Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã',
        '–æ–±—â–∏–µ',
        '—É—á–∞—Å—Ç–Ω–∏–∫–∏',
        '–µ–¥–∏–Ω–æ–µ —Å–≤—è–∑–Ω–æ–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ'
    ]

    for element in required_elements:
        if element in source:
            print(f"‚úÖ –≠–ª–µ–º–µ–Ω—Ç '{element}' –Ω–∞–π–¥–µ–Ω –≤ _moderator_round_intro")
        else:
            print(f"‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç '{element}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ _moderator_round_intro")

    return True


def test_speaker_response_update():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ —Å–ø–∏–∫–µ—Ä–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ —Å–ø–∏–∫–µ—Ä–æ–≤...")

    import inspect
    source = inspect.getsource(PodcastOrchestrator._speaker_response)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É
    improvements = [
        '–≤–≤–µ–¥–µ–Ω–∏–µ –≤ —Ä–∞—É–Ω–¥',
        '–∑–∞—Ç—Ä–æ–Ω—É—Ç—ã–º –≤–æ–ø—Ä–æ—Å–∞–º',
        '–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ',
        '—É—á–∞—Å—Ç–Ω–∏–∫ –¥–∏—Å–∫—É—Å—Å–∏–∏'
    ]

    for improvement in improvements:
        if improvement in source:
            print(f"‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ '{improvement}' –Ω–∞–π–¥–µ–Ω–æ –≤ _speaker_response")
        else:
            print(f"‚ö†Ô∏è –£–ª—É—á—à–µ–Ω–∏–µ '{improvement}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ _speaker_response")

    return True


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üéôÔ∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –†–ï–ü–õ–ò–ö –ú–û–î–ï–†–ê–¢–û–†–ê")
    print("=" * 70)

    tests = [
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞", test_orchestrator_structure),
        ("–õ–æ–≥–∏–∫–∞ —Ä–∞—É–Ω–¥–æ–≤", test_round_flow_logic),
        ("–£–ª—É—á—à–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–∏—è", test_intro_enhancement),
        ("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ —Å–ø–∏–∫–µ—Ä–æ–≤", test_speaker_response_update)
    ]

    passed = 0
    total = len(tests)

    for test_name, test_func in tests:
        print(f"\nüìã {test_name}:")
        try:
            if test_func():
                passed += 1
                print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
            else:
                print(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e}")

    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")

    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        return 0
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        return 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)